"use strict";(self["webpackChunkmhrdamage"]=self["webpackChunkmhrdamage"]||[]).push([[459],{459:(e,t,s)=>{s.r(t);s.d(t,{getSetBuilds:()=>getSetBuilds,getSetRequirements:()=>getSetRequirements,getSkillReq:()=>getSkillReq,testBuild:()=>testBuild});var o=s(16);var i=s(552);var r=s(923);const n=JSON.parse('{"AttackBoost":[3,2,[[2,2,1,1,15],[1,1,1,1,10]]],"Agitator":[4,3,[[2,2,2,2,16],[2,2,1,1,12]]],"PeakPerformance":[3,2,[[2,2,1,1,12],[1,1,1,1,8]]],"Resentment":[4,3,[[2,2,2,2,16],[2,2,1,1,12]]],"Resuscitate":[3,2,[[2,2,1,1,12],[1,1,1,1,8]]],"CriticalEye":[3,2,[[2,2,1,1,15],[1,1,1,1,10]]],"CriticalBoost":[3,2,[[3,3,0,0,15],[2,2,0,0,10]]],"WeaknessExploit":[3,2,[[3,3,0,0,15],[2,2,0,0,10]]],"LatentPower":[5,4,[[3,3,2,2,20],[2,2,2,2,16]]],"MaximumMight":[3,2,[[2,2,1,1,12],[1,1,1,1,8]]],"CriticalElement":[3,2,[[2,2,1,1,9],[1,1,1,1,6]]],"MastersTouch":[3,2,[[2,2,1,1,15],[1,1,1,1,10]]],"FireAttack":[5,3,[[2,1,1,1,5],[1,1,1,0,3]]],"WaterAttack":[5,3,[[2,1,1,1,5],[1,1,1,0,3]]],"IceAttack":[5,3,[[2,1,1,1,5],[1,1,1,0,3]]],"ThunderAttack":[5,3,[[2,1,1,1,5],[1,1,1,0,3]]],"DragonAttack":[5,3,[[2,1,1,1,5],[1,1,1,0,3]]],"PoisonAttack":[3,3,[[1,1,1,1,6],[1,1,1,1,6]]],"ParalysisAttack":[3,2,[[2,2,1,1,6],[1,1,1,1,4]]],"SleepAttack":[3,2,[[2,2,1,1,6],[1,1,1,1,4]]],"BlastAttack":[3,2,[[2,2,1,1,6],[1,1,1,1,4]]],"Handicraft":[4,3,[[2,2,2,2,16],[2,2,2,1,12]]],"RazorSharp":[3,2,[[2,2,1,1,15],[1,1,1,1,10]]],"SpareShot":[3,2,[[2,2,1,1,15],[1,1,1,1,10]]],"ProtectivePolish":[3,2,[[2,2,1,1,9],[1,1,1,1,6]]],"MindsEye":[3,2,[[2,2,1,1,9],[1,1,1,1,6]]],"Ballistics":[3,2,[[2,2,1,1,9],[1,1,1,1,6]]],"Bludgeoner":[3,2,[[3,3,0,0,0],[2,2,0,0,0]]],"Focus":[3,2,[[2,2,1,1,9],[1,1,1,1,6]]],"PowerProlonger":[3,2,[[2,2,1,1,9],[1,1,1,1,6]]],"MarathonRunner":[3,2,[[2,2,1,1,6],[1,1,1,1,4]]],"Constitution":[5,4,[[3,3,2,2,10],[2,2,2,2,8]]],"StaminaSurge":[3,2,[[2,2,1,1,6],[1,1,1,1,4]]],"Guard":[5,4,[[3,3,2,0,10],[2,2,2,0,8]]],"GuardUp":[3,2,[[2,2,1,1,6],[1,1,1,1,4]]],"OffensiveGuard":[3,2,[[2,2,2,1,9],[1,1,1,1,6]]],"CriticalDraw":[3,2,[[2,2,2,1,9],[1,1,1,1,6]]],"PunishingDraw":[3,2,[[2,2,1,1,6],[1,1,1,1,4]]],"QuickSheathe":[3,2,[[2,2,1,1,6],[1,1,1,1,4]]],"Slugger":[3,2,[[2,2,1,1,6],[1,1,1,1,4]]],"StaminaThief":[3,3,[[1,1,1,1,3],[1,1,1,1,3]]],"AffinitySliding":[1,1,[[1,0,0,0,1],[1,0,0,0,1]]],"HornMaestro":[1,1,[[1,0,0,0,1],[1,0,0,0,1]]],"Artillery":[3,2,[[2,2,1,1,12],[1,1,1,1,8]]],"LoadShells":[2,2,[[1,1,1,1,4],[1,1,1,1,4]]],"SpecialAmmoBoost":[2,2,[[1,1,1,1,4],[1,1,1,1,4]]],"NormalRapidUp":[3,2,[[2,2,2,1,15],[1,1,1,1,10]]],"PierceUp":[3,2,[[2,2,2,1,15],[1,1,1,1,10]]],"SpreadUp":[3,2,[[2,2,2,1,15],[1,1,1,1,10]]],"AmmoUp":[3,2,[[2,2,2,1,15],[1,1,1,1,10]]],"ReloadSpeed":[3,2,[[3,0,0,0,6],[2,0,0,0,4]]],"RecoilDown":[3,2,[[3,0,0,0,6],[2,0,0,0,4]]],"Steadiness":[3,2,[[1,1,1,1,6],[2,0,0,0,4]]],"RapidFireUp":[3,2,[[3,3,3,0,15],[2,2,2,0,10]]],"DefenseBoost":[7,6,[[2,2,1,1,7],[2,1,1,1,6]]],"DivineBlessing":[3,3,[[2,2,1,1,3],[2,2,1,1,3]]],"RecoveryUp":[3,3,[[2,2,1,1,3],[2,2,1,1,3]]],"RecoverySpeed":[3,3,[[1,1,1,1,3],[1,1,1,1,3]]],"SpeedEating":[3,3,[[2,2,1,1,6],[2,2,1,1,6]]],"Earplugs":[5,4,[[3,3,3,2,15],[2,2,2,2,12]]],"Windproof":[3,3,[[1,1,1,1,3],[1,1,1,1,3]]],"TremorResistance":[3,3,[[2,2,1,1,6],[2,2,1,1,6]]],"BubblyDance":[3,3,[[2,2,1,1,6],[2,2,1,1,6]]],"EvadeWindow":[5,4,[[3,3,2,2,10],[2,2,2,2,8]]],"EvadeExtender":[3,2,[[2,2,1,1,6],[1,1,1,1,4]]],"FireResistance":[3,3,[[1,1,1,1,0],[1,1,1,1,0]]],"WaterResistance":[3,3,[[1,1,1,1,0],[1,1,1,1,0]]],"IceResistance":[3,3,[[1,1,1,1,0],[1,1,1,1,0]]],"ThunderResistance":[3,3,[[1,1,1,1,0],[1,1,1,1,0]]],"DragonResistance":[3,3,[[1,1,1,1,0],[1,1,1,1,0]]],"BlightResistance":[3,2,[[2,2,1,1,3],[1,1,1,1,2]]],"PoisonResistance":[3,3,[[1,1,1,1,3],[1,1,1,1,3]]],"ParalysisResistance":[3,3,[[1,1,1,1,3],[1,1,1,1,3]]],"SleepResistance":[3,3,[[1,1,1,1,3],[1,1,1,1,3]]],"StunResistance":[3,3,[[1,1,1,1,3],[1,1,1,1,3]]],"MuckResistance":[2,2,[[2,0,0,0,2],[2,0,0,0,2]]],"BlastResistance":[3,3,[[1,1,1,1,3],[1,1,1,1,3]]],"Botanist":[4,4,[[2,1,1,1,0],[2,1,1,1,0]]],"Geologist":[3,3,[[1,1,1,1,0],[1,1,1,1,0]]],"Partbreaker":[3,2,[[2,2,1,1,6],[1,1,1,1,4]]],"GoodLuck":[3,2,[[2,2,2,1,12],[1,1,1,1,8]]],"SpeedSharpening":[3,2,[[1,1,1,1,3],[2,0,0,0,2]]],"Bombardier":[3,3,[[1,1,1,1,0],[1,1,1,1,0]]],"Mushroomancer":[3,2,[[2,2,2,1,9],[1,1,1,1,6]]],"ItemProlonger":[3,3,[[1,1,1,1,3],[1,1,1,1,3]]],"Wide-Range":[5,4,[[2,2,1,1,5],[1,1,1,1,4]]],"FreeMeal":[3,3,[[1,1,1,1,3],[1,1,1,1,3]]],"Heroics":[4,3,[[2,2,2,2,12],[2,2,1,1,9]]],"Fortify":[1,1,[[1,1,0,0,1],[1,1,0,0,1]]],"FlinchFree":[3,3,[[1,1,1,1,3],[1,1,1,1,3]]],"JumpMaster":[1,1,[[1,1,1,0,0],[1,1,1,0,0]]],"CarvingPro":[1,1,[[1,0,0,0,0],[1,0,0,0,0]]],"HungerResistance":[3,3,[[1,1,1,1,3],[1,1,1,1,3]]],"LeapofFaith":[1,1,[[1,0,0,0,1],[1,0,0,0,1]]],"Diversion":[1,1,[[1,0,0,0,1],[1,0,0,0,1]]],"MasterMounter":[1,1,[[1,1,0,0,1],[1,1,0,0,1]]],"WirebugWhisperer":[3,3,[[2,2,1,1,9],[2,2,1,1,9]]],"WallRunner":[3,3,[[1,1,1,1,6],[1,1,1,1,6]]],"Counterstrike":[3,2,[[2,2,1,1,6],[1,1,1,1,4]]],"RapidMorph":[3,2,[[2,2,1,1,12],[1,1,1,1,8]]],"HellfireCloak":[4,3,[[2,2,2,2,12],[2,2,2,1,9]]],"Coalescence":[3,2,[[2,2,1,1,12],[1,1,1,1,8]]],"Redirection":[2,1,[[1,1,1,1,6],[1,1,1,0,3]]],"SpiribirdsCall":[1,1,[[1,0,0,0,1],[1,0,0,0,1]]],"ChargeMaster":[3,2,[[2,2,1,1,9],[1,1,1,1,6]]],"Foray":[3,2,[[2,2,1,1,9],[1,1,1,1,6]]],"Tune-Up":[2,1,[[1,1,1,1,8],[1,1,1,0,4]]],"GrinderS":[3,2,[[2,2,2,1,9],[1,1,1,1,6]]],"BladescaleHone":[3,2,[[2,2,1,1,9],[1,1,1,1,6]]],"WallRunnerBoost":[1,1,[[1,0,0,0,1],[1,0,0,0,1]]],"Burst":[3,2,[[2,2,1,1,12],[1,1,1,1,8]]],"ChameleosBlessing":[4,3,[[4,0,0,0,8],[3,0,0,0,6]]],"KushalaBlessing":[4,3,[[4,0,0,0,8],[3,0,0,0,6]]],"TeostraBlessing":[4,3,[[4,0,0,0,8],[3,0,0,0,6]]],"Dragonheart":[4,3,[[4,4,4,4,12],[3,3,3,3,9]]],"BloodRite":[3,2,[[2,2,2,1,12],[1,1,1,1,8]]],"Bloodlust":[3,2,[[3,3,3,3,12],[2,2,2,2,8]]],"Dereliction":[2,1],"Furious":[3,2,[[0,0,0,0,9],[0,0,0,0,6]]],"MailofHellfire":[3,2,[[0,0,0,0,9],[0,0,0,0,6]]],"SneakAttack":[3,2,[[2,2,1,1,12],[1,1,1,1,8]]],"AdrenalineRush":[3,2,[[2,2,1,1,9],[1,1,1,1,6]]],"ElementExploit":[3,2,[[2,2,1,1,9],[1,1,1,1,6]]],"StatusTrigger":[3,2,[[2,2,2,1,9],[1,1,1,1,6]]],"Defiance":[5,4,[[3,1,1,1,10],[2,1,1,1,8]]],"Guts":[2,1,[[0,0,0,0,10],[0,0,0,0,5]]],"Embolden":[3,2,[[2,2,1,1,6],[1,1,1,1,4]]],"IntrepidHeart":[2,1,[[1,1,1,0,4],[1,0,0,0,2]]],"BuildupBoost":[3,2,[[0,0,0,0,12],[0,0,0,0,8]]],"Berserk":[2,1],"Strife":[3,2,[[0,0,0,0,9],[0,0,0,0,6]]],"WindMantle":[3,2,[[0,0,0,0,9],[0,0,0,0,6]]],"PowderMantle":[3,2,[[0,0,0,0,9],[0,0,0,0,6]]],"Frostcraft":[3,2,[[0,0,0,0,12],[0,0,0,0,8]]],"DragonConversion":[3,2,[[0,0,0,0,12],[0,0,0,0,8]]],"FrenziedBloodlust":[3,2,[[0,0,0,0,9],[0,0,0,0,6]]]}');function applyArmorFilter(e,t,s){let o=JSON.parse(JSON.stringify(window.info.armor));const i={helm:[],waist:[],chest:[],arm:[],leg:[]};const n=[2.5,4.25,4.25,7];for(let e=0;e<5;++e){(0,r.VW)().forEach((e=>{o[e]=o[e].filter((e=>e.sex!=="MaleOnly"))}))}(0,r.VW)().forEach((r=>{o[r].forEach((o=>{if(!o)return;const l={};const a=o.skills;if(o.quriousTable!==13){let e=-1;let t;for(let[s,i]of Object.entries(o.decoAugments)){++e;if(s>3)break;if(s==0||s===3&&e<2)continue;t=[+s,i[1]]}if(t){const[e,s]=t;l.decos=s;l.augs=[{"+Slots":+e*-6}];l.quriousPoints=o.quriousPoints-6*e}}else if(o.quriousTable===13){l.decos=[1,1,0,1];l.quriousPoints=0;l.augs=[{def:5},{def:5},{def:5},{def:5},{"+Slots":-18},{"+Slots":-12}]}if(!l.augs){l.decos=o.decos;l.augs=[];l.quriousPoints=o.quriousPoints}if(e.StormSoul>3){const e=document.getElementById("StormSoul").selectedIndex===4?1:2;for(const s of a){if(t[s].qurious<6){a[s]+=e}}}l.fodderSkills=[];l.fodderCount=0;let c=l.decos[0]*n[0]+l.decos[1]*n[1]+l.decos[2]*n[2]+l.decos[3]*n[3];for(const[s,i]of Object.entries(a)){if(!e[s]){l.fodderCount+=i;for(let e=0;e<i;e++){l.fodderSkills.push(s)}}else if(e[s]){if(t[s].setBonus){c+=Math.min(e[s]*-1,a[s])*15}else if(t[s].charmNeeded){c+=Math.min(e[s]*-1,a[s])*15}c+=Math.min(-e[s],a[s])*(t[s].qurious===20?4:t[s].qurious/3)}else if(o.quriousTable!==13&&!l.fodderCount){l.fodderCount=0}}if(o.quriousTable===13){l.unBloatedPoints=0;l.armorRating=c}else{let e=[];let t=3;while(t--){if(l.augs[t]){e=e.concat(l.augs[0])}else if(l.fodderCount-t>0){e.push({"-Skill":l.fodderSkills.pop()});l.quriousPoints+=10}else{e.push({"-Def":5});l.quriousPoints+=5}}l.augs=e;l.unBloatedPoints=~~(l.quriousPoints/3);l.armorRating=c;l.armorRating=c+l.unBloatedPoints}const addArmorPiece=(e,t=true)=>{l.name=o.name;l.type=r;l.skills=o.skills;if(t){i[r].pop();i[r].splice(e,0,l)}else{i[r].push(l)}};for(let e=0;e<i[r].length;e++){if(l.armorRating>i[r][e].armorRating){addArmorPiece(e);return}}if(i[r].length<s){addArmorPiece(i[r].length-1,false)}}))}));Object.values(i).forEach((t=>t.forEach((t=>{t.skillLimitation=5-Object.keys(t.skills).length-(6-t.augs.length);t.requestedSkills=Object.keys(t.skills).filter((t=>e[t]));t.skillsRemovedCount=t.fodderCount<3?t.fodderCount:3;t.startingQuriousPoints=t.quriousPoints;delete t.armorRating}))));return i}const compareKeys=(e,t)=>{for(let s=0;s<e.length;++s){if(e[s]>t[s]){return false}}return true};let l=window.info.types;const isRestricted=e=>l.decos[e[0]]||l.qurious[e[0]]?[l.decos[e[0]],l.qurious[e[0]]]:e[0]+e[1];const getCharms=e=>{let t={qurious:{},standard:{},decos:{},charmRequired:{}};window.info.charms.forEach((s=>{if(Object.entries(s.skills).some((t=>(e[t[0]]||1)+t[1]>0)))return;if(s.key===false){let e=Object.keys(s.skills);const o=isRestricted(e);const i=isRestricted(e);const[r,n]=Array.isArray(o)?[i,o]:[o,i];if(!t.charmRequired[r]){t.charmRequired[r]={}}if(!t.charmRequired[r][n]){t.charmRequired[r][n]=[]}t.charmRequired[r][n].push(s.skills);return}let o,i;let r="standard";if(Array.isArray(s.key)&&s.key.length===4){o=[...s.key[0].slice(0,4),s.key[2]];i=s.key[0].slice(4);r=s.key[3]==="decos"?"decos":"qurious"}else{o=s.key.slice(0,4);i=s.key.slice(4)}if(!t[r][o])t[r][o]={};if(!t[r][o][i])t[r][o][i]=[];t[r][o][i].push(s.skills)}));for(let e in t){for(let s in t[e]){t[e][s]=Object.values(t[e][s]).reverse()}}const s={charmRequired:t.charmRequired};for(const e in t){const o=Object.entries(t[e]).map((e=>[e[0].split(",").reverse(),e[1]]));o.sort((([e],[t])=>t.join("")-e.join("")));let i=[];let r=[];e:for(let e of o){for(let t=0;t<r.length;t++){if(compareKeys(e[0],r[t][r[t].length-1])){r[t].push(e[0]);i[t].push(e[1]);continue e}}r[r.length]=[e[0]];i[i.length]=[e[1]]}s[e]=i}console.log(s);return s};let a={};const c=document.getElementById("dropWeapon");const u=document.getElementById("dropWeaponType");let d=0;let f=0;let m=[];let h=0;let GlobalMap=new Map;let g;let k=!window.location.origin.includes("github");let p=0;const getTotal=(e=window.info.types)=>{const{skills:t}=getSetRequirements();const{armorSkills:s,remainingSlots:o,quriousSkills:i}=a;for(let t=0;t<4;++t){if(!o[t])continue;for(const[i,r]of Object.entries(e.decoLevels[t])){s[i]=Math.max(s[i]||0,r*o[t])}}Object.entries(e.qurious).forEach((([e,t])=>{if(!i[~~(t/3)-1])return;s[e]=Math.max(s[e]||0,i[~~(t/3)-1])}));const r=[];Object.entries(s).forEach((([s,o])=>{if(!isNaN(s))return;if(t[s]+ +o>0&&e.maxLevel[s]>0){const i=(e.maxLevel[s]||window.info.skills[s].length-1)+t[s];r.push([s,Math.min(+o,i)])}else if(!t[s]&&(e.maxLevel[s]||window.info.skills[s])){r.push([s,Math.min(+o,e.maxLevel[s]||window.info.skills[s].length-1)])}}));return r.sort()};const setOutput=e=>{let t="";e.forEach((e=>{if(e[1]==0)return;t+=`<button textContent="${e[0]}">${e[0].replace(/(?<=[a-z])([A-Z])(?![A-Z])/g," $1")} +${+e[1]}</button>`}));if(document.getElementById("temp"))document.getElementById("temp").remove();document.querySelector(".extraSkills").innerHTML+=t;document.getElementById("extraOutput").textContent=`Found ${p.toLocaleString()} Builds / ${d.toLocaleString()} Combinations`;if(!window.location.href.includes("github")){console.log((performance.now()-f)/1e3);console.log(GlobalMap)}};const getUsedCharm=e=>{const t=[];for(let s of e.usedSkills){for(let e of s.charm){t.push(`${e[0][0]}: ${e[0][1]} & ${e[1][0]}: ${e[1][1]}`)}}return t};const getSkillReq=(e=[])=>{document.querySelectorAll(".buildSkills>div>.skill").forEach((t=>{if(t.selectedIndex>0)e.push([t.id,t.selectedIndex])}));return e};const getSetRequirements=(e=window.info.types)=>{const t={};const s={};let o=new Set;window.info.charms.forEach((e=>Object.keys(e.skills).map((e=>o.add(e)))));document.querySelectorAll("#searcherSkills>div>output").forEach((i=>{const r=i.className.split(" ")[1];t[r]=-i.textContent.match(/(?<=Lv-)\d/)[0];s[r]={lvl:e.decos[r]??5,lvl4:e.lvl4[r]??0,qurious:~~((e.qurious[r]??(o.has(r)||e.decos[r]?30:60))/3)};let l=0;if(s[r].lvl===5)++l;if(s[r].qurious>5)++l;if(!o.has(r))++l;if(l===3){if(!s.setBonus)s.setBonus={};s.setBonus[r]=-t[r]}else if(l===2){if(!s.charmNeeded)s.charmNeeded={};s.charmNeeded[r]=-t[r];s.charmSkillPoints=n[r][0]}}));return{skills:Object.fromEntries(Object.entries(t).sort(((e,t)=>s[t[0]].lvl-s[e[0]].lvl||s[e[0]].qurious-s[t[0]].qurious))),skillInfo:s}};const resetGlobals=()=>{g="";document.getElementById("setReturn").classList.remove("augInvis");document.querySelectorAll(".extraSkills>button").forEach((e=>e.remove()));if(document.getElementById("temp"))document.getElementById("temp").remove();document.querySelector(".extraSkills").innerHTML+="<P2 id='temp' style='font-size:18px !important; height:15em !important;'>Searching...</P2>";document.getElementsByClassName("grid")[0].innerHTML="";a={remainingSlots:[0,0,0,0],armorSkills:{},quriousSkills:[0,0,0,0,0]};d=0;p=0};const receiveMessage=e=>{for(const t of e){if(GlobalMap.size<100){GlobalMap.set(GlobalMap.size,t);const e=getUsedCharm(t);let s='<button type="button" aria-pressed="false" class="equipBuild">Equip Build</button>';const o=Object.keys(t.usedSkills[0].augments);for(let e=0;e<5;e++){s+=`<output class="armorImg ${(0,r.VW)()[e]}"></output><span>${o[e]}</span>`}let i="";e.forEach((e=>{i+=`<option value="${e}">${e}</option>`}));s+=`<output class="armorImg charm"></output><select class="armorCharm" title="charmSkill1">${i}</select>`;const n=document.createElement("div");n.classList.add("setResult");n.innerHTML=s;document.querySelector(".grid").appendChild(n)}let e=0;for(let t=0;t<=100;t++){if(!GlobalMap.has(t))break;e+=GlobalMap.get(t).count}document.getElementById("setOutput").textContent=`Displayed ${Math.min(100,GlobalMap.size)} Builds / ${e.toLocaleString()} Combinations`}};const max=(e,t)=>e>=t?e:t;function startWorkers(){for(let e=0;e<5;e++){m[e]=new Worker("./setBuildWorker.js")}m.forEach((e=>{e.addEventListener("message",(e=>{--h;if(e.data.final.sets.length){d+=e.data.final.count.combos;p+=e.data.final.count.sets;if(GlobalMap.size<100){receiveMessage(e.data.final.sets)}}let t=e.data.final.stats;for(let e=0;e<4;e++){a.remainingSlots[e]=max(a.remainingSlots[e]||0,t.remainingSlots[e])}for(let e=0;e<5;e++){a.quriousSkills[e]=max(a.quriousSkills[e]||0,t.quriousSkills[e])}for(const[e,s]of Object.entries(t.armorSkills)){a.armorSkills[e]=max(a.armorSkills[e]||0,s)}if(!k)e.target.terminate();if(h)return;setOutput(getTotal());if(!GlobalMap.has("finished")){document.querySelector(".grid").innerHTML+=g;g="";GlobalMap.set("finished",true)}if(!d){document.getElementById("setOutput").textContent="No Results Found";document.querySelectorAll(".grid>div").forEach((e=>e.remove()))}}))}))}const getSetBuilds=(e=10)=>{if(h||k){f=performance.now();if(m.length){for(let e of m)e.terminate()}}h=5;startWorkers();const t=getSetRequirements();t.charmSlots=window.info[u.value].weapons[c.value].decos.slice();document.querySelectorAll(".charmSlot").forEach((e=>{if(e.selectedIndex>0){++t.charmSlots[e.selectedIndex-1]}}));t.theseCharms=getCharms(t.skills);t.armors=applyArmorFilter(t.skills,t.skillInfo,e);t.skillInfo={charmNeeded:t.skillInfo.charmNeeded,charmSkillPoints:t.skillInfo.charmSkillPoints,setBonus:t.skillInfo.setBonus,setLimiter:4-document.getElementById("skillsLimit").selectedIndex};t.skills=Object.entries(t.skills).sort(((e,t)=>window.info.types.qurious[e[0]]-window.info.types.qurious[t[0]]));let s=t.armors.helm.splice(0);let o=~~(s.length/5);GlobalMap.clear();for(const e of m){t.armors.helm=s.splice(0,o);e.postMessage(t)}resetGlobals()};let S=0;let y="";document.addEventListener("keypress",(e=>{if(!(e.key===["t","e","s","t"][Math.min(3,S)]&&++S<3)){if(e.key==="Enter"&&S>=3){testBuild(y!=="f");y="";S=0}else if(/t|f/.test(e.key)&&S>=3){y=e.key}else if(S<3){S=0}}}));const testBuild=(e=true)=>{["PeakPerformance","Coalescence","CriticalEye","CriticalBoost","MaximumMight","RecoilDown","ReloadSpeed","RapidFireUp","PierceUp","Burst","Agitator","AttackBoost","AmmoUp","SpareShot"].forEach((e=>(0,i.Nb)(e,window.info.types.maxLevel[e])));getSetBuilds(15);return GlobalMap};document.getElementById("startSearch").addEventListener("click",(()=>getSetBuilds(10)));document.getElementById("normalSearch").addEventListener("click",(()=>getSetBuilds()));document.getElementById("extendedSearch").addEventListener("click",(()=>getSetBuilds(15)));document.querySelector(".grid").addEventListener("mousedown",(e=>{if(e.target.tagName!=="BUTTON"){return}const t=Object.values(document.querySelectorAll("div.grid > div.setResult")).indexOf(e.target.parentElement);if(!GlobalMap.has(t))return;const s=GlobalMap.get(t);let r=e.target.parentElement.lastElementChild.selectedIndex;let n=0;for(let e of s.usedSkills){if(r<e.charm.length)break;++n;r-=e.charm.length}let l=s.usedSkills[n];let a=l.charm[r];(0,o.dj)(a);if(r!==0){let e=Object.fromEntries(l.charm[0]);if(e[a[0][0]]){let t=Math.min(e[a[0][0]],a[0][1]);e[a[0][0]]-=t;a[0][1]-=t}if(e[a[1][0]]){let t=Math.min(e[a[1][0]],a[0][1]);e[a[1][0]]-=t;a[1][1]-=t}for(let[t]of a){if(!a[1])continue;for(let s of l.decos){if(!a[1])break;if(s[0]===t&&s[1]<=a[1]){for(let t in e){if(e[t]>=s[1]){let o=t;s[0]=o;e[o]-=s[1];a[1]-=s[1];break}}}}}for(let[t,s]of a){if(!s)continue;let o=[];for(let e of Object.values(l.usedSkills.augments))o=o.concat(e);while(s-- >0){let i=o.find((e=>e["-Skill"]===t));if(!i){console.log("error finding augment to replace")}for(let t in e){if(e[t]>0){i["-Skill"]=t;--e[t];--s;break}}}}}(0,o.qy)(l.augments);(0,o.Cj)((0,o.G_)(l.decos));document.getElementById("setReturn").classList.add("augInvis");(0,i.TG)();document.querySelectorAll(".extraSkills>button").forEach((e=>e.remove()));document.querySelectorAll(".grid>div").forEach((e=>e.remove()));(0,o.to)();(0,i.TG)();if(!window.location.href.includes("github")){console.log(JSON.parse(JSON.stringify(l)))}GlobalMap.clear()}))}}]);