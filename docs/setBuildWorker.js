(()=>{"use strict";const e=JSON.parse('{"decos":{"AffinitySliding":1,"BlastResistance":1,"Bombardier":1,"Botanist":1,"CarvingPro":1,"ChameleosBlessing":1,"DefenseBoost":1,"Defiance":1,"Diversion":1,"DragonAttack":1,"DragonResistance":1,"FireAttack":1,"FireResistance":1,"FlinchFree":1,"FreeMeal":1,"Geologist":1,"HornMaestro":1,"HungerResistance":1,"IceAttack":1,"IceResistance":1,"IntrepidHeart":1,"KushalaBlessing":1,"LeapofFaith":1,"MuckResistance":1,"ParalysisResistance":1,"PoisonAttack":1,"PoisonResistance":1,"RecoilDown":1,"RecoverySpeed":1,"ReloadSpeed":1,"ShockAbsorber":1,"SleepResistance":1,"SpeedSharpening":1,"SpiribirdsCall":1,"StaminaThief":1,"Steadiness":1,"StunResistance":1,"TeostraBlessing":1,"ThunderAttack":1,"ThunderResistance":1,"WallRunnerBoost":1,"WaterAttack":1,"WaterResistance":1,"Windproof":1,"AdrenalineRush":2,"Agitator":2,"Artillery":2,"AttackBoost":2,"Ballistics":2,"BladescaleHone":2,"BlastAttack":2,"BlightResistance":2,"Bludgeoner":2,"BubblyDance":2,"Burst":2,"ChargeMaster":2,"Coalescence":2,"Constitution":2,"Counterstrike":2,"CriticalBoost":2,"CriticalElement":2,"CriticalEye":2,"DivineBlessing":2,"ElementExploit":2,"Embolden":2,"EvadeExtender":2,"EvadeWindow":2,"Focus":2,"Foray":2,"Fortify":2,"Guard":2,"GuardUp":2,"Heroics":2,"ItemProlonger":2,"LatentPower":2,"LoadShells":2,"MarathonRunner":2,"MasterMounter":2,"MastersTouch":2,"MaximumMight":2,"MindsEye":2,"ParalysisAttack":2,"Partbreaker":2,"PeakPerformance":2,"PowerProlonger":2,"ProtectivePolish":2,"PunishingDraw":2,"QuickSheathe":2,"RapidMorph":2,"RazorSharp":2,"RecoveryUp":2,"Resentment":2,"Resuscitate":2,"SleepAttack":2,"Slugger":2,"SneakAttack":2,"SpareShot":2,"SpecialAmmoBoost":2,"SpeedEating":2,"StaminaSurge":2,"TremorResistance":2,"WallRunner":2,"WeaknessExploit":2,"Wide-Range":2,"WirebugWhisperer":2,"AmmoUp":3,"BloodRite":3,"CriticalDraw":3,"Earplugs":3,"GoodLuck":3,"GrinderS":3,"Handicraft":3,"HellfireCloak":3,"JumpMaster":3,"Mushroomancer":3,"NormalRapidUp":3,"OffensiveGuard":3,"PierceUp":3,"QuickBreath":3,"RapidFireUp":3,"Redirection":3,"SpreadUp":3,"StatusTrigger":3,"Tune-Up":3,"Bloodlust":4,"BowChargePlus":4,"Dragonheart":4},"maxLevel":{"AdrenalineRush":3,"AffinitySliding":1,"Agitator":5,"AmmoUp":3,"Artillery":3,"AttackBoost":7,"Ballistics":3,"Berserk":2,"BladescaleHone":3,"BlastAttack":3,"BlastResistance":3,"BlightResistance":3,"Bloodlust":3,"BloodRite":3,"Bludgeoner":3,"Bombardier":3,"Botanist":4,"BowChargePlus":1,"BubblyDance":3,"BuildupBoost":3,"Burst":3,"CaptureMaster":1,"CarvingMaster":1,"CarvingPro":1,"ChameleosBlessing":4,"ChargeMaster":3,"Coalescence":3,"Constitution":5,"Counterstrike":3,"CriticalBoost":3,"CriticalDraw":3,"CriticalElement":3,"CriticalEye":7,"DefenseBoost":7,"Defiance":5,"Dereliction":3,"Diversion":1,"DivineBlessing":3,"DragonAttack":5,"DragonConversion":3,"Dragonheart":5,"DragonResistance":3,"Earplugs":5,"ElementExploit":3,"Embolden":3,"EvadeExtender":3,"EvadeWindow":5,"FireAttack":5,"FireResistance":3,"FlinchFree":3,"Focus":3,"Foray":3,"Fortify":1,"FreeMeal":3,"FrenziedBloodlust":3,"Frostcraft":3,"Furious":3,"Geologist":3,"GoodLuck":3,"GrinderS":3,"Guard":5,"GuardUp":3,"Guts":3,"Handicraft":5,"Heaven-Sent":3,"HellfireCloak":4,"Heroics":5,"HornMaestro":1,"HungerResistance":3,"IceAttack":5,"IceResistance":3,"IntrepidHeart":2,"ItemProlonger":3,"JumpMaster":1,"KushalaBlessing":4,"LatentPower":5,"LeapofFaith":1,"LoadShells":2,"MailofHellfire":3,"MarathonRunner":3,"MasterMounter":1,"MastersTouch":3,"MaximumMight":3,"MindsEye":3,"MuckResistance":2,"Mushroomancer":3,"NormalRapidUp":3,"OffensiveGuard":3,"ParalysisAttack":3,"ParalysisResistance":3,"Partbreaker":3,"PeakPerformance":3,"PierceUp":3,"PoisonAttack":3,"PoisonResistance":3,"PowderMantle":3,"PowerProlonger":3,"ProtectivePolish":3,"PunishingDraw":3,"QuickBreath":1,"QuickSheathe":3,"RapidFireUp":3,"RapidMorph":3,"RazorSharp":3,"RecoilDown":3,"RecoverySpeed":3,"RecoveryUp":3,"Redirection":2,"ReloadSpeed":3,"Resentment":5,"Resuscitate":3,"ShockAbsorber":1,"SleepAttack":3,"SleepResistance":3,"Slugger":3,"SneakAttack":3,"SpareShot":3,"SpecialAmmoBoost":2,"SpeedEating":3,"SpeedSharpening":3,"SpiribirdsCall":1,"SpreadUp":3,"StaminaSurge":3,"StaminaThief":3,"StatusTrigger":3,"Steadiness":3,"Stormsoul":5,"Strife":3,"StunResistance":3,"TeostraBlessing":4,"ThunderAlignment":5,"ThunderAttack":5,"ThunderResistance":3,"TremorResistance":3,"Tune-Up":2,"WallRunner":3,"WallRunnerBoost":1,"WaterAttack":5,"WaterResistance":3,"WeaknessExploit":3,"Wide-Range":5,"WindAlignment":5,"WindMantle":3,"Windproof":3,"WirebugWhisperer":3},"qurious":{"AmmoUp":15,"AttackBoost":15,"CriticalBoost":15,"CriticalEye":15,"Guts":15,"MastersTouch":15,"NormalRapidUp":15,"PierceUp":15,"RapidFireUp":15,"RazorSharp":15,"SpareShot":15,"SpreadUp":15,"WeaknessExploit":15,"Agitator":12,"Artillery":12,"BloodRite":12,"Bloodlust":12,"BuildupBoost":12,"Burst":12,"Coalescence":12,"DragonConversion":12,"Frostcraft":12,"GoodLuck":12,"Handicraft":12,"LatentPower":12,"MaximumMight":12,"PeakPerformance":12,"RapidMorph":12,"Resentment":12,"Resuscitate":12,"SneakAttack":12,"Tune-Up":12,"AdrenalineRush":9,"Ballistics":9,"BladescaleHone":9,"ChargeMaster":9,"CriticalDraw":9,"CriticalElement":9,"Dragonheart":9,"Earplugs":9,"ElementExploit":9,"Focus":9,"Foray":9,"Furious":9,"GrinderS":9,"HellfireCloak":9,"Heroics":9,"MailofHellfire":9,"MindsEye":9,"Mushroomancer":9,"OffensiveGuard":9,"PowderMantle":9,"PowerProlonger":9,"ProtectivePolish":9,"Redirection":9,"StatusTrigger":9,"Strife":9,"WindMantle":9,"WirebugWhisperer":9,"BlastAttack":6,"BubblyDance":6,"ChameleosBlessing":6,"Constitution":6,"Counterstrike":6,"Defiance":6,"Embolden":6,"EvadeExtender":6,"EvadeWindow":6,"Guard":6,"GuardUp":6,"IntrepidHeart":6,"KushalaBlessing":6,"LoadShells":6,"MarathonRunner":6,"ParalysisAttack":6,"Partbreaker":6,"PoisonAttack":6,"PunishingDraw":6,"QuickSheathe":6,"RecoilDown":6,"ReloadSpeed":6,"SleepAttack":6,"Slugger":6,"SpecialAmmoBoost":6,"SpeedEating":6,"StaminaSurge":6,"Steadiness":6,"TeostraBlessing":6,"TremorResistance":6,"WallRunner":6,"AffinitySliding":3,"BlastResistance":3,"BlightResistance":3,"DefenseBoost":3,"Diversion":3,"DivineBlessing":3,"DragonAttack":3,"FireAttack":3,"FlinchFree":3,"Fortify":3,"FreeMeal":3,"HornMaestro":3,"HungerResistance":3,"IceAttack":3,"ItemProlonger":3,"LeapofFaith":3,"MasterMounter":3,"MuckResistance":3,"ParalysisResistance":3,"PoisonResistance":3,"RecoverySpeed":3,"RecoveryUp":3,"SleepResistance":3,"SpeedSharpening":3,"SpiribirdsCall":3,"StaminaThief":3,"StunResistance":3,"ThunderAttack":3,"WallRunnerBoost":3,"WaterAttack":3,"Wide-Range":3,"Windproof":3},"pointsPerSlot":[{"ChameleosBlessing":1,"Defiance":1,"IntrepidHeart":1,"KushalaBlessing":1,"PoisonAttack":1,"RecoilDown":1,"ReloadSpeed":1,"Steadiness":1,"TeostraBlessing":1,"AffinitySliding":1,"BlastResistance":1,"DefenseBoost":1,"Diversion":1,"DragonAttack":1,"FireAttack":1,"FlinchFree":1,"FreeMeal":1,"HornMaestro":1,"HungerResistance":1,"IceAttack":1,"LeapofFaith":1,"MuckResistance":1,"ParalysisResistance":1,"PoisonResistance":1,"RecoverySpeed":1,"SleepResistance":1,"SpeedSharpening":1,"SpiribirdsCall":1,"StaminaThief":1,"StunResistance":1,"ThunderAttack":1,"WallRunnerBoost":1,"WaterAttack":1,"Windproof":1,"Bombardier":1,"Botanist":1,"CarvingPro":1,"DragonResistance":1,"FireResistance":1,"Geologist":1,"IceResistance":1,"ShockAbsorber":1,"ThunderResistance":1,"WaterResistance":1},{"AttackBoost":1,"CriticalBoost":1,"CriticalEye":1,"MastersTouch":1,"RazorSharp":1,"SpareShot":1,"WeaknessExploit":1,"Agitator":1,"Artillery":1,"Burst":1,"Coalescence":1,"LatentPower":1,"MaximumMight":1,"PeakPerformance":1,"RapidMorph":1,"Resentment":1,"Resuscitate":1,"SneakAttack":1,"AdrenalineRush":1,"Ballistics":1,"BladescaleHone":1,"ChargeMaster":1,"CriticalElement":1,"ElementExploit":1,"Focus":1,"Foray":1,"Heroics":1,"MindsEye":1,"PowerProlonger":1,"ProtectivePolish":1,"WirebugWhisperer":1,"BlastAttack":1,"BubblyDance":1,"Constitution":1,"Counterstrike":1,"Embolden":1,"EvadeExtender":1,"EvadeWindow":1,"Guard":1,"GuardUp":1,"LoadShells":1,"MarathonRunner":1,"ParalysisAttack":1,"Partbreaker":1,"PunishingDraw":1,"QuickSheathe":1,"SleepAttack":1,"Slugger":1,"SpecialAmmoBoost":1,"SpeedEating":1,"StaminaSurge":1,"TremorResistance":1,"WallRunner":1,"ChameleosBlessing":1,"DefenseBoost":2,"Defiance":1,"DragonAttack":2,"FireAttack":2,"IceAttack":2,"IntrepidHeart":1,"KushalaBlessing":1,"PoisonAttack":1,"RecoilDown":1,"ReloadSpeed":1,"Steadiness":1,"TeostraBlessing":1,"ThunderAttack":2,"WaterAttack":2,"BlightResistance":1,"DivineBlessing":1,"Fortify":1,"ItemProlonger":1,"MasterMounter":1,"RecoveryUp":1,"Wide-Range":1,"AffinitySliding":1,"BlastResistance":1,"Diversion":1,"FlinchFree":1,"FreeMeal":1,"HornMaestro":1,"HungerResistance":1,"LeapofFaith":1,"MuckResistance":1,"ParalysisResistance":1,"PoisonResistance":1,"RecoverySpeed":1,"SleepResistance":1,"SpeedSharpening":1,"SpiribirdsCall":1,"StaminaThief":1,"StunResistance":1,"WallRunnerBoost":1,"Windproof":1,"Bludgeoner":1,"Bombardier":1,"Botanist":1,"CarvingPro":1,"DragonResistance":1,"FireResistance":1,"Geologist":1,"IceResistance":1,"ShockAbsorber":1,"ThunderResistance":1,"WaterResistance":1},{"AmmoUp":1,"NormalRapidUp":1,"PierceUp":1,"RapidFireUp":1,"SpreadUp":1,"AttackBoost":1,"CriticalBoost":1,"CriticalEye":1,"MastersTouch":1,"RazorSharp":1,"SpareShot":1,"WeaknessExploit":1,"BloodRite":1,"GoodLuck":1,"Handicraft":1,"Tune-Up":1,"Agitator":1,"Artillery":1,"Burst":1,"Coalescence":1,"Guard":2,"LatentPower":1,"MaximumMight":1,"PeakPerformance":1,"RapidMorph":1,"Resentment":1,"Resuscitate":1,"SneakAttack":1,"IntrepidHeart":2,"CriticalDraw":1,"Earplugs":1,"GrinderS":1,"HellfireCloak":1,"Mushroomancer":1,"OffensiveGuard":1,"Redirection":1,"StatusTrigger":1,"AdrenalineRush":1,"Ballistics":1,"BladescaleHone":1,"ChargeMaster":1,"CriticalElement":1,"ElementExploit":1,"Focus":1,"Foray":1,"Heroics":1,"MindsEye":1,"PowerProlonger":1,"ProtectivePolish":1,"Wide-Range":3,"WirebugWhisperer":1,"DefenseBoost":3,"DragonAttack":3,"FireAttack":3,"IceAttack":3,"ThunderAttack":3,"WaterAttack":3,"BlastAttack":1,"BubblyDance":1,"Constitution":1,"Counterstrike":1,"Embolden":1,"EvadeExtender":1,"EvadeWindow":1,"GuardUp":1,"LoadShells":1,"MarathonRunner":1,"ParalysisAttack":1,"Partbreaker":1,"PunishingDraw":1,"QuickSheathe":1,"SleepAttack":1,"Slugger":1,"SpecialAmmoBoost":1,"SpeedEating":1,"StaminaSurge":1,"TremorResistance":1,"WallRunner":1,"ChameleosBlessing":1,"Defiance":1,"KushalaBlessing":1,"PoisonAttack":1,"RecoilDown":1,"ReloadSpeed":1,"Steadiness":1,"TeostraBlessing":1,"BlightResistance":1,"DivineBlessing":1,"Fortify":1,"ItemProlonger":1,"MasterMounter":1,"RecoveryUp":1,"AffinitySliding":1,"BlastResistance":1,"Diversion":1,"FlinchFree":1,"FreeMeal":1,"HornMaestro":1,"HungerResistance":1,"LeapofFaith":1,"MuckResistance":1,"ParalysisResistance":1,"PoisonResistance":1,"RecoverySpeed":1,"SleepResistance":1,"SpeedSharpening":1,"SpiribirdsCall":1,"StaminaThief":1,"StunResistance":1,"WallRunnerBoost":1,"Windproof":1,"JumpMaster":1,"QuickBreath":1,"Bludgeoner":1,"Bombardier":1,"Botanist":1,"CarvingPro":1,"DragonResistance":1,"FireResistance":1,"Geologist":1,"IceResistance":1,"ShockAbsorber":1,"ThunderResistance":1,"WaterResistance":1},{"AmmoUp":2,"NormalRapidUp":2,"PierceUp":2,"SpreadUp":2,"AttackBoost":2,"CriticalEye":2,"MastersTouch":2,"RazorSharp":2,"GoodLuck":2,"Handicraft":2,"Tune-Up":2,"Agitator":2,"Artillery":2,"Burst":2,"Coalescence":2,"LatentPower":2,"MaximumMight":2,"PeakPerformance":2,"RapidMorph":2,"Resentment":2,"Resuscitate":2,"SneakAttack":2,"CriticalDraw":2,"Earplugs":2,"GrinderS":2,"HellfireCloak":2,"Mushroomancer":2,"OffensiveGuard":2,"Redirection":2,"StatusTrigger":2,"AdrenalineRush":2,"Ballistics":2,"BladescaleHone":2,"ChargeMaster":2,"CriticalElement":2,"ElementExploit":2,"Focus":2,"Foray":2,"Heroics":2,"MindsEye":2,"PowerProlonger":2,"ProtectivePolish":2,"WallRunner":3,"WirebugWhisperer":2,"Defiance":3,"PoisonAttack":3,"Steadiness":3,"RapidFireUp":1,"CriticalBoost":1,"SpareShot":1,"WeaknessExploit":1,"DefenseBoost":5,"Bloodlust":1,"BloodRite":1,"BlastAttack":2,"BubblyDance":2,"Constitution":2,"Counterstrike":2,"Embolden":2,"EvadeExtender":2,"EvadeWindow":2,"Guard":2,"GuardUp":2,"LoadShells":2,"MarathonRunner":2,"ParalysisAttack":2,"Partbreaker":2,"PunishingDraw":2,"QuickSheathe":2,"SleepAttack":2,"Slugger":2,"SpecialAmmoBoost":2,"SpeedEating":2,"StaminaSurge":2,"TremorResistance":2,"Wide-Range":4,"DragonAttack":4,"FireAttack":4,"IceAttack":4,"IntrepidHeart":2,"ThunderAttack":4,"WaterAttack":4,"Dragonheart":1,"ItemProlonger":3,"BlastResistance":3,"FlinchFree":3,"FreeMeal":3,"HungerResistance":3,"ParalysisResistance":3,"PoisonResistance":3,"RecoverySpeed":3,"SleepResistance":3,"SpeedSharpening":3,"StaminaThief":3,"StunResistance":3,"Windproof":3,"BlightResistance":2,"DivineBlessing":2,"RecoveryUp":2,"ChameleosBlessing":1,"KushalaBlessing":1,"RecoilDown":1,"ReloadSpeed":1,"TeostraBlessing":1,"Fortify":1,"MasterMounter":1,"AffinitySliding":1,"Diversion":1,"HornMaestro":1,"LeapofFaith":1,"MuckResistance":1,"SpiribirdsCall":1,"WallRunnerBoost":1,"BowChargePlus":1,"JumpMaster":1,"QuickBreath":1,"Bludgeoner":1,"Bombardier":3,"Botanist":3,"CarvingPro":1,"DragonResistance":3,"FireResistance":3,"Geologist":3,"IceResistance":3,"ShockAbsorber":1,"ThunderResistance":3,"WaterResistance":3}]}');let{decos:t,maxLevel:i,qurious:s,pointsPerSlot:a}=e;const max=(e,t)=>e>=t?e:t,getMostSkills=(e,t)=>{for(const i of e){for(let e=0;e<4;e++)t.remainingSlots[e]=max(t.remainingSlots[e]||0,i.remainingSlots[e]);for(let e=0;e<5;e++)t.quriousSkills[e]=max(t.quriousSkills[e]||0,i.quriousSkills[e]);for(const[e,s]of Object.entries(i.armorSkills))t.armorSkills[e]=max(t.armorSkills[e]||0,s)}},slotDecos=(e,t,i)=>{for(let s of[0,3,2,1])for(const[n,o]of a[s]){if(!t[s])break;if(!e.get(n))continue;const a=Math.min(t[s],~~(e.get(n)/-o));a&&(e.set(n,e.get(n)+a*o),t[s]-=a,i.decos.push([n,o,"Slot lvl"+(+s+1),a]))}const n=new Map;for(let t of e.keys()){const i=s[t]/3;e.get(t)>=0||!t||!i||(n.has(i)||n.set(i,{total:0,skills:new Set}),n.get(i).total-=e.get(t),n.get(i).skills.add(t))}return[n,t]};const getPoints=(e,t)=>{e.fodderSkills.length>0?(t[e.name].push({"-Skill":e.fodderSkills[++e.skillsRemovedCount]}),e.quriousPoints+=10):(t[e.name].push({"-Def":5}),e.quriousPoints+=5),e.unBloatedPoints=~~(e.quriousPoints/3)},minimumCostForPossibleAugs=(e,t,i,s=0)=>{let a=0;for(let n=0;e>0&&n<t.length;++n){const o=Math.min(i.get(t[n]).total-(s===t[n]?1:0),e);a+=o*t[n],e-=o}return a};function pushAugs(e,t,i,a,n=!1){if(i.innateSkills.add(e),n&&(i.quriousPoints-=s[e],i.unBloatedPoints=~~(i.quriousPoints/3)),i.innateSkills.size>5||i.quriousPoints<0)return a&&console.log(i,t[i.name],e),!0;t[i.name].push({"+Skill":e})}function getBestCombos(e,t,i,s){return 2===e?function(e,t,i){let s=[[],0];for(let a=0,n=e.length;0!==a||!s[1];){if(++a>=n){if(s[1])return s;++s[1],a=0}let o=e[a];if(t.get(o).total)for(let r=a;r<n;r++){let a=e[r];if(o+a>i)break;if(!(o+a<=s[1]||t.get(a).total<1+(o===a))&&(s=[[o,a],o+a],s[1]===i))return s}}return s}(t,i,Math.min(10,s)):3===e?function(e,t,i){let s=[[],0];for(let a=0,n=e.length;0!==a||!s[1];){if(++a>=n){if(s[1])return s;++s[1],a=0}let o=+e[a];for(let r=a;r<n;r++){let a=+e[r];if(!(t.get(a).total<1+(o===a)))for(let l=r;l<n;l++){let n=+e[l];if(o+a+n>i)break;if(!(o+a+n<=s[1]||t.get(n).total<1+(n===o)+(n===a)||(s=[[o,a,n],o+a+n],s[1]!==i)))return s}}}return s}(t,i,s>15?15:s):((e,t)=>{for(let i=e.length-1;i>=0;--i)if(e[i]<=t)return[[e[i]],e[i]]})(t,s)||[[0],1]}function updateRemainingSkills(e,t,i,s){if(0==--e.get(t).total)return e.delete(t),!0;-1!==s.get(i)?s.set(i,s.get(i)+1):e.get(t).skills.delete(i)}const combosFullRestriction=(e,t,i,s)=>{let a=Math.min(5,~~(i/t));for(;a>0;){if(e.has(a)&&e.get(a).total-e.get(a).skills.size>=t-1)for(let i of e.get(a).skills)if(-s.get(i)>=t)return[[i,t]];--a}return!1},combosPartalRestriction=(e,t,i,s)=>{let a=t.length;for(;a--;){const n=t[a],{total:o}=e.get(n),[...r]=e.get(n).skills;let l=Math.min(5,i-2*n);if(o<=r.length||+t[0]>l)continue;let c=-1;for(let i of r){let a=s.get(i);if(++c,!(a>-2)){if(l===n&&o>=3)return a<-2?[[i,3]]:[[i,2],[r[0===c?1:c-1],1]];for(;l>=t[0];--l)if(e.has(l)&&l!==n){return[[i,2],[e.get(l).skills.values().next().value,1]]}}}}return!1},getQuriousSkills=(e,t,i,a,n,o,r)=>{let l=0;for(let t of e.values())l+=t.total;let[...c]=e.keys();if(l>5*n)return!1;for(let e of t)i[e.name]=e.augs.slice();for(const u of a){let a,d=t[u];d.hasBeenAugmented=!1,d.innateSkills=new Set;for(let e in d.skills)d.innateSkills.add(e);if(d.quriousPoints=d.startingQuriousPoints,d.unBloatedPoints=~~(d.quriousPoints/3),l<=0||i[d.name].length>=6)continue;let f=6-i[d.name].length,g=5-d.innateSkills.size,h=Math.min(f,l,n),S=f-l;for(;--S>=0||minimumCostForPossibleAugs(h,c,e)>d.unBloatedPoints&&--h>0;)getPoints(d,i);if(h){if(g<h)for(let t of d.requestedSkills){const a=s[t]/3;for(;g<h&&e.get(a)?.skills.has(t)&&(r.get(t)<-1||a+minimumCostForPossibleAugs(h-1,c,e,a)<=d.unBloatedPoints);)pushAugs(t,i,d,o,!0)||(--h,--l,updateRemainingSkills(e,a,t,r)&&c.splice(c.indexOf(a),1))}if(g<h){let t;for(;!t&&1===g&&h>1;)t=combosFullRestriction(e,h,d.unBloatedPoints,r),!1===t&&(--h,getPoints(d,i));if(void 0===t&&(t=combosPartalRestriction(e,c,d.unBloatedPoints,r),!1===t&&(--h,getPoints(d,i))),t){d.hasBeenAugmented=!0;for(let a of t)for(;a[1]--;)pushAugs(a[0],i,d,o,!0)||(--l,updateRemainingSkills(e,s[a[0]]/3,a[0],r)&&c.splice(c.indexOf(s[a[0]]/3),1))}}if(!d.hasBeenAugmented&&d.unBloatedPoints>=c[0]){if(a=getBestCombos(h,c,e,d.unBloatedPoints),!a[0])continue;if((d.quriousPoints-=3*a[1])<0||isNaN(d.quriousPoints)){o&&console.log(`${d.name} has ${d.quriousPoints} points}`,d);continue}for(const t of a[0]){const s=e.get(t).skills.values().next().value;pushAugs(s,i,d,o)||(--l,updateRemainingSkills(e,t,s,r)&&c.splice(c.indexOf(t),1))}}}}e:for(const s of t){if(!l||n<4||!c.length)break;if(!(s.quriousPoints<3*+c[0]))for(let t=s.augs.length-1;t>=0&&s.unBloatedPoints>0;t--){if(6===s.augs.length&&s.quriousPoints<3||s.quriousPoints<8&&!s.augs[t]["-Skill"]||!s.augs[t]["-Def"])continue e;let a,n,o=i[s.name],u=o.length<6?0:o[t]["-Def"]?1:o[t]["-Skill"]?2:void 0;if(void 0===u)continue;let d=c.length-1;t:for(;d>=0;d--)if(!((s.quriousPoints-5*u)/3<c[d]))for(let t of e.get(c[d]).skills)if("total"!==t&&(s.innateSkills.size<5||s.innateSkills.has(t))){a=c[d],n=t;break t}if(!a)continue e;if(s.innateSkills.add(n),s.innateSkills.size>5)continue e;s.quriousPoints-=5*u+3*a,s.unBloatedPoints=~~(s.quriousPoints/3),u?o.splice(t,1,{"+Skill":n}):o.push({"+Skill":n}),--l,updateRemainingSkills(e,a,n,r)&&c.splice(d,1)}}return!c.length};function filterCharmsOverSkillMax(e,t){for(const s in e)if(t.has(s)&&t.get(s)+e[s]>i[s])return!0}function resetArmors(e,t,s){for(let i of t.keys())e.set(i,t.get(i));for(let t of s.requestedSkills)if(e.set(t,(e.get(t)||0)+s.skills[t]),e.get(t)>i[t])return!0}function testSets(e,t,i,s,a,n,o){let r={};r[e.charm[0][0]]=e.charm[0][1],r[e.charm[1][0]]=e.charm[1][1],e.decos.forEach((([e,t,,i])=>{r[e]=(r[e]||0)+t*i}));for(const t of e.armorSkills)r[t[0]]=(r[t[0]]||0)+t[1];for(let i of t)e.augments[i.name].forEach((e=>{e["+Skill"]&&(r[e["+Skill"]]=(r[e["+Skill"]]||0)+1)}));if(Object.entries(i).every((e=>r[e[0]]+e[1]>=0)))return!0;n.push({skillsNeeded:i,innateArmorSkills:e.armorSkills,charmSkills:e.charm,initalDecos:o,decosRecord:e.decos,skillsNeededAfterDecos:s,skillAugmentsRecorded:e.augments,remainingSkillsListAfterAugment:a})}function findExtraDecorationSkills(e,t,i){for(let a=i.length-1;a>=0;a--){if(!i[a])continue;const n=[...t].sort(((e,t)=>t[2].slice(-1)-e[2].slice(-1)));for(let[t,o,r,l]of n){const n=s[t]/3,c=r.slice(-1)-1;if(a!==n||i[a]<o)continue;const u=Math.min(l,Math.floor(i[a]/o));e[c]+=u,i[a]-=u*o}}return e}function findExtraQuriousSkills(e,t){const i=[0,0,0,0,0];for(const s of e){if(s.quriousPoints<(6===t[s.name].length?8:3)||s.innateSkills?.size>4)continue;let e=0,a=0;const n=5-s.innateSkills.size;for(let i of t[s.name])i["-Def"]?++e:i["-Skill"]&&++a;let o=6-t[s.name].length,r=--o>=0?0:--e>=0?5:--a>=0?10:"continue";if("continue"===r)continue;let l=1;for(;s.quriousPoints>=r+3*l&&l<=n;){let t=Math.min(5,~~((s.quriousPoints-r)/l/3));for(;--t>=0;)++i[t];if(r+=--o>=0?0:--e>=0?5:--a>=0?10:"continue","continue"===r)break;++l}}return i}function findExtraArmorSkills(e,t,i={}){for(const t of e){if(t.quriousPoints<5||!t.fodderCount)continue;let e=Math.min(~~(t.quriousPoints/5),t.fodderCount);for(let s in t.skills)t.innateSkills.has(s)||(i[s]=(i[s]||0)+Math.min(t[s],e))}return i}self.onmessage=e=>{const i={sets:[],count:{sets:0,combos:0},stats:{quriousSkills:[0,0,0,0,0],armorSkills:{},remainingSlots:[0,0,0,0]}};a.forEach(((i,n)=>{let o=[];for(let t in i)e.data.skills[t]&&o.push([t,i[t]]);a[n]=o.sort(((e,i)=>s[i[0]]*i[1]-s[e[0]]*e[1]||t[i[0]]-t[e[0]]))}));const n=[];let o=[0,1,2,3,4];const{theseCharms:r,skills:l,armors:c}=e.data,{setLimiter:u,charmNeeded:d,runChecks:f}=e.data.skillInfo,g=new Map;for(let e in l)g.set(e,l[e]);let h=[[],[],[],[],[]];for(const t of c.helm){let s=new Map;for(let e of t.requestedSkills)s.set(e,t.skills[e]);h[0]=t;for(const a of c.chest){let S=new Map;if(!resetArmors(S,s,a)){h[1]=a;for(const s of c.arm){let k=new Map;if(!resetArmors(k,S,s)){h[2]=s;for(const S of c.waist){let p=new Map;if(!resetArmors(p,k,S)){h[3]=S;e:for(const k of c.leg){let c=new Map;if(resetArmors(c,p,k))continue;if(h[4]=k,e.data.setBonus)for(let t in e.data.setBonus)if(!(c.get(t)+e.data.setBonus[t]>=0))continue e;const[...m]=c,R=[0,0,0,0];[t.decos,a.decos,s.decos,S.decos,k.decos,e.data.charmSlots].forEach((e=>e.forEach(((e,t)=>R[t]+=e)))),o.sort(((e,t)=>h[e].skillLimitation-h[t].skillLimitation));const B=[];let P=["standard","qurious","deco"];if(d)for(const t in d)if(P=["charmNeeded"],c.get(t)>=d[t])P=["standard","qurious","deco"];else if((c.get(t)||0)+e.data.skillInfo.charmSkillPoints[t]<d[t])continue e;for(const e of P)if(r[e])t:for(const t of Object.values(r[e]))for(const e of t)i:for(let t=0;t<e.length;++t){let s=e[t];if(filterCharmsOverSkillMax(s,c))continue i;const a={decos:[],augments:{},armorSkills:m,charm:Object.entries(s)};for(const e of g.keys())g.set(e,l[e]+(c.get(e)||0)+(s[e]||0));const[r,d]=slotDecos(g,R.slice(),a);if(!getQuriousSkills(r,h,a.augments,o,u,f,g))continue t;if(!f||testSets(a,h,l,g,r,n,R)){let s=findExtraQuriousSkills(h,a.augments);B.push({usedSkills:a,armors:[[h[0].name,h[0]],[h[1].name,h[1]],[h[2].name,h[2]],[h[3].name,h[3]],[h[4]?.name,h[4]]],charmList:e.slice(t).filter((e=>!filterCharmsOverSkillMax(e,c))),quriousSkills:s,remainingSlots:findExtraDecorationSkills(d,a.decos,s.slice()),armorSkills:findExtraArmorSkills(h,a.augments),decoArr:R}),1===B.length?(B[0].totalCount=B[0].charmList.length,i.count.combos+=B[0].charmList.length):(B[0].totalCount=B.at(-1).charmList.length,i.count.combos+=B.at(-1).charmList.length);break i}}if(!B.length)continue e;if(getMostSkills(B,i.stats),++i.count.sets>20&&B[0].totalCount<i.sets.at(-1).totalCount)continue e;20===i.sets.length?i.sets.pop():i.sets.length||i.sets.push(B);let A=i.sets.length-1;for(;A>=0&&B[0].totalCount>i.sets[A].totalCount;)--A;i.sets.splice(A,0,B)}}}}}}}}f&&n.length&&console.log(structuredClone(n)),postMessage({final:i})}})();