(()=>{"use strict";var e={};const t=JSON.parse('{"decos":{"AffinitySliding":1,"BlastResistance":1,"Bombardier":1,"Botanist":1,"CarvingPro":1,"ChameleosBlessing":1,"DefenseBoost":1,"Defiance":1,"Diversion":1,"DragonAttack":1,"DragonResistance":1,"FireAttack":1,"FireResistance":1,"FlinchFree":1,"FreeMeal":1,"Geologist":1,"HornMaestro":1,"HungerResistance":1,"IceAttack":1,"IceResistance":1,"Inspiration":1,"IntrepidHeart":1,"KushalaBlessing":1,"LeapofFaith":1,"MuckResistance":1,"ParalysisResistance":1,"PoisonAttack":1,"PoisonResistance":1,"RecoilDown":1,"RecoverySpeed":1,"ReloadSpeed":1,"ShockAbsorber":1,"SleepResistance":1,"SpeedSharpening":1,"SpiribirdsCall":1,"StaminaThief":1,"Steadiness":1,"StunResistance":1,"TeostraBlessing":1,"ThunderAttack":1,"ThunderResistance":1,"WallRunnerBoost":1,"WaterAttack":1,"WaterResistance":1,"Windproof":1,"AdrenalineRush":2,"Agitator":2,"Artillery":2,"AttackBoost":2,"Ballistics":2,"BladescaleHone":2,"BlastAttack":2,"BlightResistance":2,"Bludgeoner":2,"BubblyDance":2,"Burst":2,"ChargeMaster":2,"Coalescence":2,"Constitution":2,"Counterstrike":2,"CriticalBoost":2,"CriticalElement":2,"CriticalEye":2,"DivineBlessing":2,"ElementExploit":2,"Embolden":2,"EvadeExtender":2,"EvadeWindow":2,"Focus":2,"Foray":2,"Fortify":2,"Guard":2,"GuardUp":2,"Heroics":2,"ItemProlonger":2,"LatentPower":2,"LoadShells":2,"MarathonRunner":2,"MasterMounter":2,"MastersTouch":2,"MaximumMight":2,"MindsEye":2,"ParalysisAttack":2,"Partbreaker":2,"PeakPerformance":2,"PowerProlonger":2,"ProtectivePolish":2,"PunishingDraw":2,"QuickSheathe":2,"RapidMorph":2,"RazorSharp":2,"RecoveryUp":2,"Resentment":2,"Resuscitate":2,"SleepAttack":2,"Slugger":2,"SneakAttack":2,"SpareShot":2,"SpecialAmmoBoost":2,"SpeedEating":2,"StaminaSurge":2,"TremorResistance":2,"WallRunner":2,"WeaknessExploit":2,"Wide-Range":2,"WirebugWhisperer":2,"AmmoUp":3,"BloodRite":3,"CriticalDraw":3,"Earplugs":3,"GoodLuck":3,"GrinderS":3,"Handicraft":3,"HellfireCloak":3,"JumpMaster":3,"Mushroomancer":3,"NormalRapidUp":3,"OffensiveGuard":3,"PierceUp":3,"QuickBreath":3,"RapidFireUp":3,"Redirection":3,"SpreadUp":3,"StatusTrigger":3,"Tune-Up":3,"Bloodlust":4,"BowChargePlus":4,"Dragonheart":4},"maxLevel":{"AdrenalineRush":3,"AffinitySliding":1,"Agitator":5,"AmmoUp":3,"Artillery":3,"AttackBoost":7,"Ballistics":3,"Berserk":2,"BladescaleHone":3,"BlastAttack":3,"BlastResistance":3,"BlightResistance":3,"BloodAwakening":3,"Bloodlust":3,"BloodRite":3,"Bludgeoner":3,"Bombardier":3,"Botanist":4,"BowChargePlus":1,"BubblyDance":3,"BuildupBoost":3,"Burst":3,"CaptureMaster":1,"CarvingMaster":1,"CarvingPro":1,"ChameleosBlessing":4,"ChargeMaster":3,"Coalescence":3,"Constitution":5,"Counterstrike":3,"CriticalBoost":3,"CriticalDraw":3,"CriticalElement":3,"CriticalEye":7,"DefenseBoost":7,"Defiance":5,"Dereliction":3,"Diversion":1,"DivineBlessing":3,"DragonAttack":5,"DragonConversion":3,"Dragonheart":5,"DragonResistance":3,"Earplugs":5,"ElementExploit":3,"Embolden":3,"EvadeExtender":3,"EvadeWindow":5,"FireAttack":5,"FireResistance":3,"FlinchFree":3,"Focus":3,"Foray":3,"Fortify":1,"FreeMeal":3,"FrenziedBloodlust":3,"Frostcraft":3,"Furious":3,"Geologist":3,"GoodLuck":3,"GrinderS":3,"Guard":5,"GuardUp":3,"Guts":3,"Handicraft":5,"Heaven-Sent":3,"HellfireCloak":4,"Heroics":5,"HornMaestro":1,"HungerResistance":3,"IceAttack":5,"IceResistance":3,"Inspiration":1,"IntrepidHeart":2,"ItemProlonger":3,"JumpMaster":1,"KushalaBlessing":4,"LatentPower":5,"LeapofFaith":1,"LoadShells":2,"MailofHellfire":3,"MarathonRunner":3,"MasterMounter":1,"MastersTouch":3,"MaximumMight":3,"MindsEye":3,"MuckResistance":2,"Mushroomancer":3,"NormalRapidUp":3,"OffensiveGuard":3,"ParalysisAttack":3,"ParalysisResistance":3,"Partbreaker":3,"PeakPerformance":3,"PierceUp":3,"PoisonAttack":3,"PoisonResistance":3,"PowderMantle":3,"PowerProlonger":3,"ProtectivePolish":3,"PunishingDraw":3,"QuickBreath":1,"QuickSheathe":3,"RapidFireUp":3,"RapidMorph":3,"RazorSharp":3,"RecoilDown":3,"RecoverySpeed":3,"RecoveryUp":3,"Redirection":2,"ReloadSpeed":3,"Resentment":5,"Resuscitate":3,"ShockAbsorber":1,"SleepAttack":3,"SleepResistance":3,"Slugger":3,"SneakAttack":3,"SpareShot":3,"SpecialAmmoBoost":2,"SpeedEating":3,"SpeedSharpening":3,"SpiribirdsCall":1,"SpreadUp":3,"StaminaSurge":3,"StaminaThief":3,"StatusTrigger":3,"Steadiness":3,"Stormsoul":5,"Strife":3,"StunResistance":3,"TeostraBlessing":4,"ThunderAlignment":5,"ThunderAttack":5,"ThunderResistance":3,"TremorResistance":3,"Tune-Up":2,"WallRunner":3,"WallRunnerBoost":1,"WaterAttack":5,"WaterResistance":3,"WeaknessExploit":3,"Wide-Range":5,"WindAlignment":5,"WindMantle":3,"Windproof":3,"WirebugWhisperer":3},"qurious":{"AmmoUp":15,"AttackBoost":15,"CriticalBoost":15,"CriticalEye":15,"Guts":15,"MastersTouch":15,"NormalRapidUp":15,"PierceUp":15,"RapidFireUp":15,"RazorSharp":15,"SpareShot":15,"SpreadUp":15,"WeaknessExploit":15,"Agitator":12,"Artillery":12,"BloodRite":12,"Bloodlust":12,"BuildupBoost":12,"Burst":12,"Coalescence":12,"DragonConversion":12,"Frostcraft":12,"GoodLuck":12,"Handicraft":12,"LatentPower":12,"MaximumMight":12,"PeakPerformance":12,"RapidMorph":12,"Resentment":12,"Resuscitate":12,"SneakAttack":12,"Tune-Up":12,"AdrenalineRush":9,"Ballistics":9,"BladescaleHone":9,"ChargeMaster":9,"CriticalDraw":9,"CriticalElement":9,"Dragonheart":9,"Earplugs":9,"ElementExploit":9,"Focus":9,"Foray":9,"FrenziedBloodlust":9,"Furious":9,"GrinderS":9,"HellfireCloak":9,"Heroics":9,"MailofHellfire":9,"MindsEye":9,"Mushroomancer":9,"OffensiveGuard":9,"PowderMantle":9,"PowerProlonger":9,"ProtectivePolish":9,"Redirection":9,"StatusTrigger":9,"Strife":9,"WindMantle":9,"WirebugWhisperer":9,"BlastAttack":6,"BubblyDance":6,"ChameleosBlessing":6,"Constitution":6,"Counterstrike":6,"Defiance":6,"Embolden":6,"EvadeExtender":6,"EvadeWindow":6,"Guard":6,"GuardUp":6,"IntrepidHeart":6,"KushalaBlessing":6,"LoadShells":6,"MarathonRunner":6,"ParalysisAttack":6,"Partbreaker":6,"PoisonAttack":6,"PunishingDraw":6,"QuickSheathe":6,"RecoilDown":6,"ReloadSpeed":6,"SleepAttack":6,"Slugger":6,"SpecialAmmoBoost":6,"SpeedEating":6,"StaminaSurge":6,"Steadiness":6,"TeostraBlessing":6,"TremorResistance":6,"WallRunner":6,"AffinitySliding":3,"BlastResistance":3,"BlightResistance":3,"DefenseBoost":3,"Diversion":3,"DivineBlessing":3,"DragonAttack":3,"FireAttack":3,"FlinchFree":3,"Fortify":3,"FreeMeal":3,"HornMaestro":3,"HungerResistance":3,"IceAttack":3,"ItemProlonger":3,"LeapofFaith":3,"MasterMounter":3,"MuckResistance":3,"ParalysisResistance":3,"PoisonResistance":3,"RecoverySpeed":3,"RecoveryUp":3,"SleepResistance":3,"SpeedSharpening":3,"SpiribirdsCall":3,"StaminaThief":3,"StunResistance":3,"ThunderAttack":3,"WallRunnerBoost":3,"WaterAttack":3,"Wide-Range":3,"Windproof":3},"pointsPerSlot":[{"ChameleosBlessing":1,"Defiance":1,"IntrepidHeart":1,"KushalaBlessing":1,"PoisonAttack":1,"RecoilDown":1,"ReloadSpeed":1,"Steadiness":1,"TeostraBlessing":1,"AffinitySliding":1,"BlastResistance":1,"DefenseBoost":1,"Diversion":1,"DragonAttack":1,"FireAttack":1,"FlinchFree":1,"FreeMeal":1,"HornMaestro":1,"HungerResistance":1,"IceAttack":1,"LeapofFaith":1,"MuckResistance":1,"ParalysisResistance":1,"PoisonResistance":1,"RecoverySpeed":1,"SleepResistance":1,"SpeedSharpening":1,"SpiribirdsCall":1,"StaminaThief":1,"StunResistance":1,"ThunderAttack":1,"WallRunnerBoost":1,"WaterAttack":1,"Windproof":1,"Bombardier":1,"Botanist":1,"CarvingPro":1,"DragonResistance":1,"FireResistance":1,"Geologist":1,"IceResistance":1,"Inspiration":1,"ShockAbsorber":1,"ThunderResistance":1,"WaterResistance":1},{"AttackBoost":1,"CriticalBoost":1,"CriticalEye":1,"MastersTouch":1,"RazorSharp":1,"SpareShot":1,"WeaknessExploit":1,"Agitator":1,"Artillery":1,"Burst":1,"Coalescence":1,"LatentPower":1,"MaximumMight":1,"PeakPerformance":1,"RapidMorph":1,"Resentment":1,"Resuscitate":1,"SneakAttack":1,"AdrenalineRush":1,"Ballistics":1,"BladescaleHone":1,"ChargeMaster":1,"CriticalElement":1,"ElementExploit":1,"Focus":1,"Foray":1,"Heroics":1,"MindsEye":1,"PowerProlonger":1,"ProtectivePolish":1,"WirebugWhisperer":1,"BlastAttack":1,"BubblyDance":1,"Constitution":1,"Counterstrike":1,"Embolden":1,"EvadeExtender":1,"EvadeWindow":1,"Guard":1,"GuardUp":1,"LoadShells":1,"MarathonRunner":1,"ParalysisAttack":1,"Partbreaker":1,"PunishingDraw":1,"QuickSheathe":1,"SleepAttack":1,"Slugger":1,"SpecialAmmoBoost":1,"SpeedEating":1,"StaminaSurge":1,"TremorResistance":1,"WallRunner":1,"ChameleosBlessing":1,"DefenseBoost":2,"Defiance":1,"DragonAttack":2,"FireAttack":2,"IceAttack":2,"IntrepidHeart":1,"KushalaBlessing":1,"PoisonAttack":1,"RecoilDown":1,"ReloadSpeed":1,"Steadiness":1,"TeostraBlessing":1,"ThunderAttack":2,"WaterAttack":2,"BlightResistance":1,"DivineBlessing":1,"Fortify":1,"ItemProlonger":1,"MasterMounter":1,"RecoveryUp":1,"Wide-Range":1,"AffinitySliding":1,"BlastResistance":1,"Diversion":1,"FlinchFree":1,"FreeMeal":1,"HornMaestro":1,"HungerResistance":1,"LeapofFaith":1,"MuckResistance":1,"ParalysisResistance":1,"PoisonResistance":1,"RecoverySpeed":1,"SleepResistance":1,"SpeedSharpening":1,"SpiribirdsCall":1,"StaminaThief":1,"StunResistance":1,"WallRunnerBoost":1,"Windproof":1,"Bludgeoner":1,"Bombardier":1,"Botanist":1,"CarvingPro":1,"DragonResistance":1,"FireResistance":1,"Geologist":1,"IceResistance":1,"Inspiration":1,"ShockAbsorber":1,"ThunderResistance":1,"WaterResistance":1},{"AmmoUp":1,"NormalRapidUp":1,"PierceUp":1,"RapidFireUp":1,"SpreadUp":1,"AttackBoost":1,"CriticalBoost":1,"CriticalEye":1,"MastersTouch":1,"RazorSharp":1,"SpareShot":1,"WeaknessExploit":1,"BloodRite":1,"GoodLuck":1,"Handicraft":1,"Tune-Up":1,"Agitator":1,"Artillery":1,"Burst":1,"Coalescence":1,"Guard":2,"LatentPower":1,"MaximumMight":1,"PeakPerformance":1,"RapidMorph":1,"Resentment":1,"Resuscitate":1,"SneakAttack":1,"IntrepidHeart":2,"CriticalDraw":1,"Earplugs":1,"GrinderS":1,"HellfireCloak":1,"Mushroomancer":1,"OffensiveGuard":1,"Redirection":1,"StatusTrigger":1,"AdrenalineRush":1,"Ballistics":1,"BladescaleHone":1,"ChargeMaster":1,"CriticalElement":1,"ElementExploit":1,"Focus":1,"Foray":1,"Heroics":1,"MindsEye":1,"PowerProlonger":1,"ProtectivePolish":1,"Wide-Range":3,"WirebugWhisperer":1,"DefenseBoost":3,"DragonAttack":3,"FireAttack":3,"IceAttack":3,"ThunderAttack":3,"WaterAttack":3,"BlastAttack":1,"BubblyDance":1,"Constitution":1,"Counterstrike":1,"Embolden":1,"EvadeExtender":1,"EvadeWindow":1,"GuardUp":1,"LoadShells":1,"MarathonRunner":1,"ParalysisAttack":1,"Partbreaker":1,"PunishingDraw":1,"QuickSheathe":1,"SleepAttack":1,"Slugger":1,"SpecialAmmoBoost":1,"SpeedEating":1,"StaminaSurge":1,"TremorResistance":1,"WallRunner":1,"ChameleosBlessing":1,"Defiance":1,"KushalaBlessing":1,"PoisonAttack":1,"RecoilDown":1,"ReloadSpeed":1,"Steadiness":1,"TeostraBlessing":1,"BlightResistance":1,"DivineBlessing":1,"Fortify":1,"ItemProlonger":1,"MasterMounter":1,"RecoveryUp":1,"AffinitySliding":1,"BlastResistance":1,"Diversion":1,"FlinchFree":1,"FreeMeal":1,"HornMaestro":1,"HungerResistance":1,"LeapofFaith":1,"MuckResistance":1,"ParalysisResistance":1,"PoisonResistance":1,"RecoverySpeed":1,"SleepResistance":1,"SpeedSharpening":1,"SpiribirdsCall":1,"StaminaThief":1,"StunResistance":1,"WallRunnerBoost":1,"Windproof":1,"JumpMaster":1,"QuickBreath":1,"Bludgeoner":1,"Bombardier":1,"Botanist":1,"CarvingPro":1,"DragonResistance":1,"FireResistance":1,"Geologist":1,"IceResistance":1,"Inspiration":1,"ShockAbsorber":1,"ThunderResistance":1,"WaterResistance":1},{"AmmoUp":2,"NormalRapidUp":2,"PierceUp":2,"SpreadUp":2,"AttackBoost":2,"CriticalEye":2,"MastersTouch":2,"RazorSharp":2,"SpareShot":2,"BloodRite":2,"GoodLuck":2,"Handicraft":2,"Tune-Up":2,"Agitator":2,"Artillery":2,"Burst":2,"Coalescence":2,"LatentPower":2,"MaximumMight":2,"PeakPerformance":2,"RapidMorph":2,"Resentment":2,"Resuscitate":2,"SneakAttack":2,"CriticalDraw":2,"Earplugs":2,"GrinderS":2,"HellfireCloak":2,"Mushroomancer":2,"OffensiveGuard":2,"Redirection":2,"StatusTrigger":2,"AdrenalineRush":2,"Ballistics":2,"BladescaleHone":2,"ChargeMaster":2,"CriticalElement":2,"ElementExploit":2,"Focus":2,"Foray":2,"Heroics":2,"MindsEye":2,"PowerProlonger":2,"ProtectivePolish":2,"WallRunner":3,"WirebugWhisperer":2,"Defiance":3,"PoisonAttack":3,"Steadiness":3,"RapidFireUp":1,"CriticalBoost":1,"WeaknessExploit":1,"DefenseBoost":5,"Bloodlust":1,"BlastAttack":2,"BubblyDance":2,"Constitution":2,"Counterstrike":2,"Embolden":2,"EvadeExtender":2,"EvadeWindow":2,"Guard":2,"GuardUp":2,"LoadShells":2,"MarathonRunner":2,"ParalysisAttack":2,"Partbreaker":2,"PunishingDraw":2,"QuickSheathe":2,"SleepAttack":2,"Slugger":2,"SpecialAmmoBoost":2,"SpeedEating":2,"StaminaSurge":2,"TremorResistance":2,"Wide-Range":4,"DragonAttack":4,"FireAttack":4,"IceAttack":4,"IntrepidHeart":2,"ThunderAttack":4,"WaterAttack":4,"Dragonheart":1,"ItemProlonger":3,"BlastResistance":3,"FlinchFree":3,"FreeMeal":3,"HungerResistance":3,"ParalysisResistance":3,"PoisonResistance":3,"RecoverySpeed":3,"SleepResistance":3,"SpeedSharpening":3,"StaminaThief":3,"StunResistance":3,"Windproof":3,"BlightResistance":2,"DivineBlessing":2,"RecoveryUp":2,"ChameleosBlessing":1,"KushalaBlessing":1,"RecoilDown":1,"ReloadSpeed":1,"TeostraBlessing":1,"Fortify":1,"MasterMounter":1,"AffinitySliding":1,"Diversion":1,"HornMaestro":1,"LeapofFaith":1,"MuckResistance":1,"SpiribirdsCall":1,"WallRunnerBoost":1,"BowChargePlus":1,"JumpMaster":1,"QuickBreath":1,"Bludgeoner":1,"Bombardier":3,"Botanist":3,"CarvingPro":1,"DragonResistance":3,"FireResistance":3,"Geologist":3,"IceResistance":3,"Inspiration":1,"ShockAbsorber":1,"ThunderResistance":3,"WaterResistance":3}]}');let{decos:i,maxLevel:s,qurious:n,pointsPerSlot:o}=t;let a=!self.origin.includes("github");let r=0;const l=new Map;const c=new Map;const u=["leg","waist","arm","chest","helm"];const d=new Map;let f=new Map;let g={0:[],3:[],2:[],1:[]};const max=(e,t)=>e>=t?e:t;const getMostSkills=(e,t)=>{for(let i=0;i<4;i++){t.remainingSlots[i]=max(t.remainingSlots[i]||0,e.remainingSlots[i])}for(let i=0;i<5;i++){t.quriousSkills[i]=max(t.quriousSkills[i]||0,e.quriousSkills[i])}for(const[i,s]of Object.entries(e.armorSkills)){t.armorSkills[i]=max(t.armorSkills[i]||0,s)}};let h={};const S=new Map;let k=false;function hasTooManyPoints(e,t){for(const i in e){if(t.get(i)+e[i]>f.get(i).maxLevel){return true}}}function setArmorsSkills(e,t){k=0;if(e){for(let i of S.values()){i[0]+=-e.decos[i[1]]+t.decos[i[1]]}for(let t of e.requestedSkills){d.set(t,d.get(t)-e.skills[t])}}else{for(let e of S.values())e[0]+=t.decos[e[1]]}for(let e of t.requestedSkills){d.set(e,d.get(e)+t.skills[e]);if(d.get(e)>f.get(e).maxLevel){k=e}}return k}self.onmessage=e=>{if(a)a=performance.now();const t={sets:[],count:{sets:0,combos:0},stats:{quriousSkills:[0,0,0,0,0],armorSkills:{},remainingSlots:[0,0,0,0]}};let{theseCharms:c,skills:p,armors:m}=e.data;for(let[e,t]of p){l.set(e,t);d.set(e,0);f.set(e,{qurious:n[e]/3,maxLevel:s[e]})}p=Object.fromEntries(p);o.forEach(((e,t)=>{let s=[];for(let t in e){if(p[t]){s[s.length]=[t,e[t]]}}g[t]=s.sort(((e,t)=>n[t[0]]*t[1]-n[e[0]]*e[1]||i[t[0]]-i[e[0]]))}));for(let t=0;t<4;++t)S.set(t,[e.data.charmSlots[t],t]);const R=[];const{setLimiter:B,charmNeeded:P,setBonus:A}=e.data.skillInfo;for(const i of m.helm){setArmorsSkills(h.helm,i);h.helm=i;for(const i of m.chest){setArmorsSkills(h.chest,i);h.chest=i;for(const i of m.arm){setArmorsSkills(h.arm,i);h.arm=i;for(const i of m.waist){setArmorsSkills(h.waist,i);h.waist=i;e:for(const i of m.leg){setArmorsSkills(h.leg,i);h.leg=i;if(k)continue;++r;if(A){for(let e in A){if(!(d.get(e)+A[e]>=0)){continue e}}}const[...s]=d;u.sort(((e,t)=>h[e].skillLimitation-h[t].skillLimitation));let n;let o=["standard","qurious","deco"];if(P){o=["charmNeeded"];for(const t in P){if(d.get(t)>=P[t]){o=["standard","qurious","deco"];continue}if((d.get(t)||0)+e.data.skillInfo.charmSkillPoints[t]<P[t]){continue e}}}for(const e of o){if(!c[e])continue;for(let t of c[e]){for(const e of t){t:for(const t of e){const e=t.find((e=>!hasTooManyPoints(e,d)));if(!e)continue;const i={decos:[],augments:{},armorSkills:s,charm:[]};for(const t of l.keys()){if(!e[t]){l.set(t,p[t]+d.get(t))}else{l.set(t,p[t]+d.get(t)+e[t])}}let o=[];for(let e of S.values())o[e[1]]=e[0];slotDecos(o,i.decos);if(getQuriousSkills(h,i.augments,u,B)){break t}if(a&&!testSets(i,h,p,e,R,S)){continue t}if(!n){let e=findExtraQuriousSkills(i.augments);n={usedSkills:[],quriousSkills:e,armorSkills:findExtraArmorSkills(i.augments),decoArr:S,count:0,remainingSlots:findExtraDecorationSkills(o,i.decos,e.slice())}}for(let e of t){const t=Object.entries(e);if(d.get(t[0][0])+t[0][1]<=f.get(t[0][0]).maxLevel&&d.get(t[1][0])+t[1][1]<=f.get(t[1][0]).maxLevel){i.charm.push(Object.entries(e))}}n.count+=i.charm.length;n.usedSkills.push(i);continue t}}}}if(!n)continue e;t.count.combos+=n.count;++t.count.sets;getMostSkills(n,t.stats);if(t.count.sets>=20&&n.totalCount<t.sets[19].totalCount){continue e}if(t.sets.length===20){t.sets.pop()}else if(!t.sets.length)t.sets[0]=n;let g=t.sets.length-1;while(g--){if(n.totalCount<t.sets[g].totalCount)break}t.sets.splice(g,0,n)}}}}}if(a&&R.length){console.log(structuredClone(R))}console.log(r,(performance.now()-a)/1e3);postMessage({final:t})};const slotDecos=(e,t)=>{for(let i in g){for(const[s,n]of g[i]){if(!e[i])break;if(l.get(s)>=0)continue;const o=Math.min(e[i],~~(l.get(s)/-n));if(!o)continue;l.set(s,l.get(s)+o*n);e[i]-=o;t[t.length]=[s,n,`Slot lvl${+i+1}`,o]}}if(c.size){for(let e of c.keys()){c.delete(e)}}for(let e of l.keys()){if(!(l.get(e)<0))continue;const t=f.get(e).qurious;if(!c.has(t)){c.set(t,{total:0,skills:new Set})}c.get(t).total-=l.get(e);c.get(t).skills.add(e)}};function getBestCombos(e,t,i){if(e===2){return findBestSum2(t,Math.min(10,i))}if(e===3){return findBestSum3(t,i>15?15:i)}return findBestSum1(t,i)||[[0],1]}function findBestSum3(e,t){let i=[[],0];let s=false;let n=0;let o=e.length;while(!s){if(++n>=o){if(i[1])return i;s=true;n=0}let a=+e[n];for(let s=n;s<o;s++){let n=+e[s];if(c.get(n).total<1+(a===n))continue;for(let r=s;r<o;r++){let s=e[r];if(a+n+s>t)break;if(a+n+s<=i[1]||c.get(s).total<1+(s===a)+(s===n))continue;i=[[a,n,s],a+n+s];if(i[1]===t)return i;continue}}}return i}function findBestSum2(e,t){let i=[[],0];let s=false;let n=0;let o=e.length;while(!s){if(++n>=o){if(i[1])return i;s=true;n=0}for(let s=n;s<o;s++){if(e[n]+e[s]>t)break;if(e[n]+e[s]<=i[1]||c.get(e[s]).total<1+(e[n]===e[s]?1:0))continue;i=[[e[n],e[s]],e[n]+e[s]];if(i[1]===t)return i}}return i}const findBestSum1=(e,t)=>{for(let i=e.length-1;i>=0;--i){if(e[i]<=t){return[[e[i]],e[i]]}}return[[],0]};const combosFullRestriction=(e,t,i)=>{let s=Math.min(5,~~(t/e))-i[0];while(s>0){if(c.has(s)&&c.get(s).total-c.get(s).skills.size>=e-1){for(let n of c.get(s).skills){if(-l.get(n)>=e){return!i?[[n,e]]:getThirdSkill([[n,2]],i,t-s*2)}}}--s}return false};const getThirdSkill=(e,t,i)=>{let s=Math.min(t[t.length-1],i);while(s>t[0]){let t=c.get(s);if(c.has(s)&&(t.total>2||!t.skills.has(e[0][0]))){for(let i of t.skills){if(l.get(i)<-2||i!==e[0][0]){e[1]=[i,1];return e}}}--s}return e};const getPoints=(e,t)=>{if(t){e.augs.push({"-Skill":t});e.quriousPoints+=10}else{e.augs.push({"-Def":5});e.quriousPoints+=5}e.unBloatedPoints=~~(e.quriousPoints/3)};const minimumCostForPossibleAugs=(e,t,i=false)=>{let s=0;for(let n=0;e>0&&n<t.length;++n){const o=Math.min(c.get(t[n]).total-(i===false?0:1),e);s+=o*t[n];e-=o}return s};function updateRecords(e,t,i){let s=f.get(e).qurious;if(!t.innateSkills.has(e)){if(t.innateSkills.size===5)return true;t.innateSkills.add(e)}if(t.unBloatedPoints<s){if(a){console.log(t,t.augs,e)}return true}t.quriousPoints-=s*3;t.unBloatedPoints-=s;t.augs.push({"+Skill":e});l.set(e,l.get(e)+1);if(--c.get(s).total===0){c.delete(s);i.splice(i.indexOf(s),1)}else if(l.get(e)===0){c.get(s).skills.delete(e)}}function getUsableSkills(e,t,i=[]){for(let s of e){if(l.get(s)<0&&t>=f.get(s).qurious){i[i.length]=[s,f.get(s).qurious]}}return i}const getQuriousSkills=(e,t,i,s)=>{let n=0;for(let e of c.values()){n+=e.total}let[...o]=c.keys();let a=s*5-n;if(a<0)return true;e:for(const i in e){let r=e[i];t[r.name]={augs:[r.augs[0],r.augs[1],r.augs[2]],innateSkills:new Set,skillsRemovedCount:-1,quriousPoints:r.startingQuriousPoints,unBloatedPoints:~~(r.quriousPoints/3),type:r.type};for(let e in r.skills)t[r.name].innateSkills.add(e);const u=t[r.name];if(n<=0)continue;let d;let g=6-u.augs.length;let h=5-u.innateSkills.size;let S=Math.min(g,n,s);let k=g-n;while(--k>=0||minimumCostForPossibleAugs(S,o)>u.unBloatedPoints&&--S>0){if(--a<0)return true;getPoints(u,r.fodderSkills[++u.fodderCount])}if(!S)continue;if(h<S){for(let e of r.requestedSkills){if(l.get(e)>=0)continue;const t=f.get(e).qurious;while(h<S&&l.get(e)<0&&t+minimumCostForPossibleAugs(S-1,o,t)<=u.unBloatedPoints){if(updateRecords(e,u,o)){continue}--S;--n}}}if(h<S){while(S>h){let e=h===1?combosFullRestriction(S,u.unBloatedPoints,0):combosFullRestriction(S,u.unBloatedPoints,o[0]);if(e){for(let t of e){while(t[1]--){if(updateRecords(t[0],u,o)){break}--n}}if(h===1)continue e}if(--a<0)return true;--S;getPoints(u,r.fodderSkills[++u.fodderCount]);continue}}if(u.unBloatedPoints>=o[0]){d=getBestCombos(S,o,u.unBloatedPoints);if(!d[0])continue;for(const e of d[0]){if(updateRecords(c.get(e).skills.values().next().value,u,o)){continue}--n}}}e:for(const a of i){let i=t[e[a].name];if(!n||s<4||!o.length){break}if(i.quriousPoints<+o[0]*3)continue;for(let e=i.augs.length-1;e>=0&&i.unBloatedPoints>0;e--){if(i.augs.length===6&&i.quriousPoints<3||i.quriousPoints<8&&!i.augs[e]["-Skill"]||!i.augs[e]["-Def"])continue e;let t=i.augs;let s=t.length<6?0:t[e]["-Def"]?1:t[e]["-Skill"]?2:undefined;if(s===undefined)continue;let a;let r;let l=o.length-1;t:for(;l>=0;l--){if((i.quriousPoints-5*s)/3<o[l])continue;for(let e of c.get(o[l]).skills){if(i.innateSkills.size<5||i.innateSkills.has(e)){a=o[l];r=e;break t}}}if(!a)continue e;if(s){i.quriousPoints-=5*s;i.unBloatedPoints=~~(i.quriousPoints/3);t.splice(e,1)}if(updateRecords(r,i,o)){continue}--n}}return o.length};function testSets(e,t,i,s,n,o){let a={...s};e.decos.forEach((([e,t,,i])=>{a[e]=(a[e]||0)+t*i}));for(const t of e.armorSkills){a[t[0]]=(a[t[0]]||0)+t[1]}for(const i of u){e.augments[t[i].name].augs.forEach((e=>{if(e["+Skill"]){a[e["+Skill"]]=(a[e["+Skill"]]||0)+1}}))}if(Object.entries(i).every((e=>a[e[0]]+e[1]>=0))){return true}else{n.push({skillsNeeded:i,innateArmorSkills:e.armorSkills,charmSkills:e.charm,initalDecos:o,decosRecord:e.decos,skillsNeededAfterDecos:l,skillAugmentsRecorded:e.augments,skillsByCostListAfterAugment:c})}}function findExtraDecorationSkills(e,t,i){for(let s=4;s>=0;s--){if(!i[s])continue;for(let[n,o,a,r]of t){const t=f.get(n).qurious;if(s!==t||i[s]<o)continue;const l=Math.min(r,~~(i[s]/o));e[a[9]-1]+=l;i[s]-=l*o}}return e}function findExtraQuriousSkills(e){const t=[0,0,0,0,0];for(const i in e){let s=e[i];if(s.quriousPoints<(s.augs.length===6?8:3)||s.innateSkills?.size>4)continue;let n=0;let o=0;const a=5-s.innateSkills.size;for(let e of s.augs){if(e["-Def"]){++n}else if(e["-Skill"]){++o}}let r=s.augs.length;let l=6-r;let c=--l>=0?0:--n>=0?5:--o>=0?10:"continue";if(c==="continue")continue;let u=1;while(s.quriousPoints>=c+u*3&&u<=a){let e=Math.min(5,~~((s.quriousPoints-c)/u/3));while(e--){++t[e]}c+=--l>=0?0:--n>=0?5:--o>=0?10:"continue";if(c==="continue")break;++u}}return t}function findExtraArmorSkills(e,t={}){for(const i in e){let s=e[i];if(s.quriousPoints<5||!s.fodderCount)continue;let n=Math.min(~~(s.quriousPoints/5),s.fodderCount);for(let e in s.skills){if(s.innateSkills.has(e))continue;t[e]=(t[e]||0)+Math.min(s[e],n)}}return t}})();