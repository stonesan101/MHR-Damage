(()=>{const e=JSON.parse('{"decos":{"AffinitySliding":1,"BlastResistance":1,"Bombardier":1,"Botanist":1,"CarvingPro":1,"ChameleosBlessing":1,"DefenseBoost":1,"Defiance":1,"Diversion":1,"DragonAttack":1,"DragonResistance":1,"FireAttack":1,"FireResistance":1,"FlinchFree":1,"FreeMeal":1,"Geologist":1,"HornMaestro":1,"HungerResistance":1,"IceAttack":1,"IceResistance":1,"Inspiration":1,"IntrepidHeart":1,"KushalaBlessing":1,"LeapofFaith":1,"MuckResistance":1,"ParalysisResistance":1,"PoisonAttack":1,"PoisonResistance":1,"RecoilDown":1,"RecoverySpeed":1,"ReloadSpeed":1,"ShockAbsorber":1,"SleepResistance":1,"SpeedSharpening":1,"SpiribirdsCall":1,"StaminaThief":1,"Steadiness":1,"StunResistance":1,"TeostraBlessing":1,"ThunderAttack":1,"ThunderResistance":1,"WallRunnerBoost":1,"WaterAttack":1,"WaterResistance":1,"Windproof":1,"AdrenalineRush":2,"Agitator":2,"Artillery":2,"AttackBoost":2,"Ballistics":2,"BladescaleHone":2,"BlastAttack":2,"BlightResistance":2,"Bludgeoner":2,"BubblyDance":2,"Burst":2,"ChargeMaster":2,"Coalescence":2,"Constitution":2,"Counterstrike":2,"CriticalBoost":2,"CriticalElement":2,"CriticalEye":2,"DivineBlessing":2,"ElementExploit":2,"Embolden":2,"EvadeExtender":2,"EvadeWindow":2,"Focus":2,"Foray":2,"Fortify":2,"Guard":2,"GuardUp":2,"Heroics":2,"ItemProlonger":2,"LatentPower":2,"LoadShells":2,"MarathonRunner":2,"MasterMounter":2,"MastersTouch":2,"MaximumMight":2,"MindsEye":2,"ParalysisAttack":2,"Partbreaker":2,"PeakPerformance":2,"PowerProlonger":2,"ProtectivePolish":2,"PunishingDraw":2,"QuickSheathe":2,"RapidMorph":2,"RazorSharp":2,"RecoveryUp":2,"Resentment":2,"Resuscitate":2,"SleepAttack":2,"Slugger":2,"SneakAttack":2,"SpareShot":2,"SpecialAmmoBoost":2,"SpeedEating":2,"StaminaSurge":2,"TremorResistance":2,"WallRunner":2,"WeaknessExploit":2,"Wide-Range":2,"WirebugWhisperer":2,"AmmoUp":3,"BloodRite":3,"CriticalDraw":3,"Earplugs":3,"GoodLuck":3,"GrinderS":3,"Handicraft":3,"HellfireCloak":3,"JumpMaster":3,"Mushroomancer":3,"NormalRapidUp":3,"OffensiveGuard":3,"PierceUp":3,"QuickBreath":3,"RapidFireUp":3,"Redirection":3,"SpreadUp":3,"StatusTrigger":3,"Tune-Up":3,"Bloodlust":4,"BowChargePlus":4,"Dragonheart":4},"maxLevel":{"AdrenalineRush":3,"AffinitySliding":1,"Agitator":5,"AmmoUp":3,"Artillery":3,"AttackBoost":7,"Ballistics":3,"Berserk":2,"BladescaleHone":3,"BlastAttack":3,"BlastResistance":3,"BlightResistance":3,"BloodAwakening":3,"Bloodlust":3,"BloodRite":3,"Bludgeoner":3,"Bombardier":3,"Botanist":4,"BowChargePlus":1,"BubblyDance":3,"BuildupBoost":3,"Burst":3,"CaptureMaster":1,"CarvingMaster":1,"CarvingPro":1,"ChameleosBlessing":4,"ChargeMaster":3,"Coalescence":3,"Constitution":5,"Counterstrike":3,"CriticalBoost":3,"CriticalDraw":3,"CriticalElement":3,"CriticalEye":7,"DefenseBoost":7,"Defiance":5,"Dereliction":3,"Diversion":1,"DivineBlessing":3,"DragonAttack":5,"DragonConversion":3,"Dragonheart":5,"DragonResistance":3,"Earplugs":5,"ElementExploit":3,"Embolden":3,"EvadeExtender":3,"EvadeWindow":5,"FireAttack":5,"FireResistance":3,"FlinchFree":3,"Focus":3,"Foray":3,"Fortify":1,"FreeMeal":3,"FrenziedBloodlust":3,"Frostcraft":3,"Furious":3,"Geologist":3,"GoodLuck":3,"GrinderS":3,"Guard":5,"GuardUp":3,"Guts":3,"Handicraft":5,"Heaven-Sent":3,"HellfireCloak":4,"Heroics":5,"HornMaestro":1,"HungerResistance":3,"IceAttack":5,"IceResistance":3,"Inspiration":1,"IntrepidHeart":2,"ItemProlonger":3,"JumpMaster":1,"KushalaBlessing":4,"LatentPower":5,"LeapofFaith":1,"LoadShells":2,"MailofHellfire":3,"MarathonRunner":3,"MasterMounter":1,"MastersTouch":3,"MaximumMight":3,"MindsEye":3,"MuckResistance":2,"Mushroomancer":3,"NormalRapidUp":3,"OffensiveGuard":3,"ParalysisAttack":3,"ParalysisResistance":3,"Partbreaker":3,"PeakPerformance":3,"PierceUp":3,"PoisonAttack":3,"PoisonResistance":3,"PowderMantle":3,"PowerProlonger":3,"ProtectivePolish":3,"PunishingDraw":3,"QuickBreath":1,"QuickSheathe":3,"RapidFireUp":3,"RapidMorph":3,"RazorSharp":3,"RecoilDown":3,"RecoverySpeed":3,"RecoveryUp":3,"Redirection":2,"ReloadSpeed":3,"Resentment":5,"Resuscitate":3,"ShockAbsorber":1,"SleepAttack":3,"SleepResistance":3,"Slugger":3,"SneakAttack":3,"SpareShot":3,"SpecialAmmoBoost":2,"SpeedEating":3,"SpeedSharpening":3,"SpiribirdsCall":1,"SpreadUp":3,"StaminaSurge":3,"StaminaThief":3,"StatusTrigger":3,"Steadiness":3,"Stormsoul":5,"Strife":3,"StunResistance":3,"TeostraBlessing":4,"ThunderAlignment":5,"ThunderAttack":5,"ThunderResistance":3,"TremorResistance":3,"Tune-Up":2,"WallRunner":3,"WallRunnerBoost":1,"WaterAttack":5,"WaterResistance":3,"WeaknessExploit":3,"Wide-Range":5,"WindAlignment":5,"WindMantle":3,"Windproof":3,"WirebugWhisperer":3},"qurious":{"AmmoUp":15,"AttackBoost":15,"CriticalBoost":15,"CriticalEye":15,"Guts":15,"MastersTouch":15,"NormalRapidUp":15,"PierceUp":15,"RapidFireUp":15,"RazorSharp":15,"SpareShot":15,"SpreadUp":15,"WeaknessExploit":15,"Agitator":12,"Artillery":12,"BloodRite":12,"Bloodlust":12,"BuildupBoost":12,"Burst":12,"Coalescence":12,"DragonConversion":12,"Frostcraft":12,"GoodLuck":12,"Handicraft":12,"LatentPower":12,"MaximumMight":12,"PeakPerformance":12,"RapidMorph":12,"Resentment":12,"Resuscitate":12,"SneakAttack":12,"Tune-Up":12,"AdrenalineRush":9,"Ballistics":9,"BladescaleHone":9,"ChargeMaster":9,"CriticalDraw":9,"CriticalElement":9,"Dragonheart":9,"Earplugs":9,"ElementExploit":9,"Focus":9,"Foray":9,"FrenziedBloodlust":9,"Furious":9,"GrinderS":9,"HellfireCloak":9,"Heroics":9,"MailofHellfire":9,"MindsEye":9,"Mushroomancer":9,"OffensiveGuard":9,"PowderMantle":9,"PowerProlonger":9,"ProtectivePolish":9,"Redirection":9,"StatusTrigger":9,"Strife":9,"WindMantle":9,"WirebugWhisperer":9,"BlastAttack":6,"BubblyDance":6,"ChameleosBlessing":6,"Constitution":6,"Counterstrike":6,"Defiance":6,"Embolden":6,"EvadeExtender":6,"EvadeWindow":6,"Guard":6,"GuardUp":6,"IntrepidHeart":6,"KushalaBlessing":6,"LoadShells":6,"MarathonRunner":6,"ParalysisAttack":6,"Partbreaker":6,"PoisonAttack":6,"PunishingDraw":6,"QuickSheathe":6,"RecoilDown":6,"ReloadSpeed":6,"SleepAttack":6,"Slugger":6,"SpecialAmmoBoost":6,"SpeedEating":6,"StaminaSurge":6,"Steadiness":6,"TeostraBlessing":6,"TremorResistance":6,"WallRunner":6,"AffinitySliding":3,"BlastResistance":3,"BlightResistance":3,"DefenseBoost":3,"Diversion":3,"DivineBlessing":3,"DragonAttack":3,"FireAttack":3,"FlinchFree":3,"Fortify":3,"FreeMeal":3,"HornMaestro":3,"HungerResistance":3,"IceAttack":3,"ItemProlonger":3,"LeapofFaith":3,"MasterMounter":3,"MuckResistance":3,"ParalysisResistance":3,"PoisonResistance":3,"RecoverySpeed":3,"RecoveryUp":3,"SleepResistance":3,"SpeedSharpening":3,"SpiribirdsCall":3,"StaminaThief":3,"StunResistance":3,"ThunderAttack":3,"WallRunnerBoost":3,"WaterAttack":3,"Wide-Range":3,"Windproof":3},"pointsPerSlot":[{"ChameleosBlessing":1,"Defiance":1,"IntrepidHeart":1,"KushalaBlessing":1,"PoisonAttack":1,"RecoilDown":1,"ReloadSpeed":1,"Steadiness":1,"TeostraBlessing":1,"AffinitySliding":1,"BlastResistance":1,"DefenseBoost":1,"Diversion":1,"DragonAttack":1,"FireAttack":1,"FlinchFree":1,"FreeMeal":1,"HornMaestro":1,"HungerResistance":1,"IceAttack":1,"LeapofFaith":1,"MuckResistance":1,"ParalysisResistance":1,"PoisonResistance":1,"RecoverySpeed":1,"SleepResistance":1,"SpeedSharpening":1,"SpiribirdsCall":1,"StaminaThief":1,"StunResistance":1,"ThunderAttack":1,"WallRunnerBoost":1,"WaterAttack":1,"Windproof":1,"Bombardier":1,"Botanist":1,"CarvingPro":1,"DragonResistance":1,"FireResistance":1,"Geologist":1,"IceResistance":1,"Inspiration":1,"ShockAbsorber":1,"ThunderResistance":1,"WaterResistance":1},{"AttackBoost":1,"CriticalBoost":1,"CriticalEye":1,"MastersTouch":1,"RazorSharp":1,"SpareShot":1,"WeaknessExploit":1,"Agitator":1,"Artillery":1,"Burst":1,"Coalescence":1,"LatentPower":1,"MaximumMight":1,"PeakPerformance":1,"RapidMorph":1,"Resentment":1,"Resuscitate":1,"SneakAttack":1,"AdrenalineRush":1,"Ballistics":1,"BladescaleHone":1,"ChargeMaster":1,"CriticalElement":1,"ElementExploit":1,"Focus":1,"Foray":1,"Heroics":1,"MindsEye":1,"PowerProlonger":1,"ProtectivePolish":1,"WirebugWhisperer":1,"BlastAttack":1,"BubblyDance":1,"Constitution":1,"Counterstrike":1,"Embolden":1,"EvadeExtender":1,"EvadeWindow":1,"Guard":1,"GuardUp":1,"LoadShells":1,"MarathonRunner":1,"ParalysisAttack":1,"Partbreaker":1,"PunishingDraw":1,"QuickSheathe":1,"SleepAttack":1,"Slugger":1,"SpecialAmmoBoost":1,"SpeedEating":1,"StaminaSurge":1,"TremorResistance":1,"WallRunner":1,"ChameleosBlessing":1,"DefenseBoost":2,"Defiance":1,"DragonAttack":2,"FireAttack":2,"IceAttack":2,"IntrepidHeart":1,"KushalaBlessing":1,"PoisonAttack":1,"RecoilDown":1,"ReloadSpeed":1,"Steadiness":1,"TeostraBlessing":1,"ThunderAttack":2,"WaterAttack":2,"BlightResistance":1,"DivineBlessing":1,"Fortify":1,"ItemProlonger":1,"MasterMounter":1,"RecoveryUp":1,"Wide-Range":1,"AffinitySliding":1,"BlastResistance":1,"Diversion":1,"FlinchFree":1,"FreeMeal":1,"HornMaestro":1,"HungerResistance":1,"LeapofFaith":1,"MuckResistance":1,"ParalysisResistance":1,"PoisonResistance":1,"RecoverySpeed":1,"SleepResistance":1,"SpeedSharpening":1,"SpiribirdsCall":1,"StaminaThief":1,"StunResistance":1,"WallRunnerBoost":1,"Windproof":1,"Bludgeoner":1,"Bombardier":1,"Botanist":1,"CarvingPro":1,"DragonResistance":1,"FireResistance":1,"Geologist":1,"IceResistance":1,"Inspiration":1,"ShockAbsorber":1,"ThunderResistance":1,"WaterResistance":1},{"AmmoUp":1,"NormalRapidUp":1,"PierceUp":1,"RapidFireUp":1,"SpreadUp":1,"AttackBoost":1,"CriticalBoost":1,"CriticalEye":1,"MastersTouch":1,"RazorSharp":1,"SpareShot":1,"WeaknessExploit":1,"BloodRite":1,"GoodLuck":1,"Handicraft":1,"Tune-Up":1,"Agitator":1,"Artillery":1,"Burst":1,"Coalescence":1,"Guard":2,"LatentPower":1,"MaximumMight":1,"PeakPerformance":1,"RapidMorph":1,"Resentment":1,"Resuscitate":1,"SneakAttack":1,"IntrepidHeart":2,"CriticalDraw":1,"Earplugs":1,"GrinderS":1,"HellfireCloak":1,"Mushroomancer":1,"OffensiveGuard":1,"Redirection":1,"StatusTrigger":1,"AdrenalineRush":1,"Ballistics":1,"BladescaleHone":1,"ChargeMaster":1,"CriticalElement":1,"ElementExploit":1,"Focus":1,"Foray":1,"Heroics":1,"MindsEye":1,"PowerProlonger":1,"ProtectivePolish":1,"Wide-Range":3,"WirebugWhisperer":1,"DefenseBoost":3,"DragonAttack":3,"FireAttack":3,"IceAttack":3,"ThunderAttack":3,"WaterAttack":3,"BlastAttack":1,"BubblyDance":1,"Constitution":1,"Counterstrike":1,"Embolden":1,"EvadeExtender":1,"EvadeWindow":1,"GuardUp":1,"LoadShells":1,"MarathonRunner":1,"ParalysisAttack":1,"Partbreaker":1,"PunishingDraw":1,"QuickSheathe":1,"SleepAttack":1,"Slugger":1,"SpecialAmmoBoost":1,"SpeedEating":1,"StaminaSurge":1,"TremorResistance":1,"WallRunner":1,"ChameleosBlessing":1,"Defiance":1,"KushalaBlessing":1,"PoisonAttack":1,"RecoilDown":1,"ReloadSpeed":1,"Steadiness":1,"TeostraBlessing":1,"BlightResistance":1,"DivineBlessing":1,"Fortify":1,"ItemProlonger":1,"MasterMounter":1,"RecoveryUp":1,"AffinitySliding":1,"BlastResistance":1,"Diversion":1,"FlinchFree":1,"FreeMeal":1,"HornMaestro":1,"HungerResistance":1,"LeapofFaith":1,"MuckResistance":1,"ParalysisResistance":1,"PoisonResistance":1,"RecoverySpeed":1,"SleepResistance":1,"SpeedSharpening":1,"SpiribirdsCall":1,"StaminaThief":1,"StunResistance":1,"WallRunnerBoost":1,"Windproof":1,"JumpMaster":1,"QuickBreath":1,"Bludgeoner":1,"Bombardier":1,"Botanist":1,"CarvingPro":1,"DragonResistance":1,"FireResistance":1,"Geologist":1,"IceResistance":1,"Inspiration":1,"ShockAbsorber":1,"ThunderResistance":1,"WaterResistance":1},{"AmmoUp":2,"NormalRapidUp":2,"PierceUp":2,"SpreadUp":2,"AttackBoost":2,"CriticalEye":2,"MastersTouch":2,"RazorSharp":2,"SpareShot":2,"BloodRite":2,"GoodLuck":2,"Handicraft":2,"Tune-Up":2,"Agitator":2,"Artillery":2,"Burst":2,"Coalescence":2,"LatentPower":2,"MaximumMight":2,"PeakPerformance":2,"RapidMorph":2,"Resentment":2,"Resuscitate":2,"SneakAttack":2,"CriticalDraw":2,"Earplugs":2,"GrinderS":2,"HellfireCloak":2,"Mushroomancer":2,"OffensiveGuard":2,"Redirection":2,"StatusTrigger":2,"AdrenalineRush":2,"Ballistics":2,"BladescaleHone":2,"ChargeMaster":2,"CriticalElement":2,"ElementExploit":2,"Focus":2,"Foray":2,"Heroics":2,"MindsEye":2,"PowerProlonger":2,"ProtectivePolish":2,"WallRunner":3,"WirebugWhisperer":2,"Defiance":3,"PoisonAttack":3,"Steadiness":3,"RapidFireUp":1,"CriticalBoost":1,"WeaknessExploit":1,"DefenseBoost":5,"Bloodlust":1,"BlastAttack":2,"BubblyDance":2,"Constitution":2,"Counterstrike":2,"Embolden":2,"EvadeExtender":2,"EvadeWindow":2,"Guard":2,"GuardUp":2,"LoadShells":2,"MarathonRunner":2,"ParalysisAttack":2,"Partbreaker":2,"PunishingDraw":2,"QuickSheathe":2,"SleepAttack":2,"Slugger":2,"SpecialAmmoBoost":2,"SpeedEating":2,"StaminaSurge":2,"TremorResistance":2,"Wide-Range":4,"DragonAttack":4,"FireAttack":4,"IceAttack":4,"IntrepidHeart":2,"ThunderAttack":4,"WaterAttack":4,"Dragonheart":1,"ItemProlonger":3,"BlastResistance":3,"FlinchFree":3,"FreeMeal":3,"HungerResistance":3,"ParalysisResistance":3,"PoisonResistance":3,"RecoverySpeed":3,"SleepResistance":3,"SpeedSharpening":3,"StaminaThief":3,"StunResistance":3,"Windproof":3,"BlightResistance":2,"DivineBlessing":2,"RecoveryUp":2,"ChameleosBlessing":1,"KushalaBlessing":1,"RecoilDown":1,"ReloadSpeed":1,"TeostraBlessing":1,"Fortify":1,"MasterMounter":1,"AffinitySliding":1,"Diversion":1,"HornMaestro":1,"LeapofFaith":1,"MuckResistance":1,"SpiribirdsCall":1,"WallRunnerBoost":1,"BowChargePlus":1,"JumpMaster":1,"QuickBreath":1,"Bludgeoner":1,"Bombardier":3,"Botanist":3,"CarvingPro":1,"DragonResistance":3,"FireResistance":3,"Geologist":3,"IceResistance":3,"Inspiration":1,"ShockAbsorber":1,"ThunderResistance":3,"WaterResistance":3}]}');let{decos:t,maxLevel:i,qurious:s,pointsPerSlot:n}=e,a=!self.origin.includes("github");const o=new Map,r=new Map,max=(e,t)=>e>=t?e:t,getMostSkills=(e,t)=>{for(const i of e){for(let e=0;e<4;e++)t.remainingSlots[e]=max(t.remainingSlots[e]||0,i.remainingSlots[e]);for(let e=0;e<5;e++)t.quriousSkills[e]=max(t.quriousSkills[e]||0,i.quriousSkills[e]);for(const[e,s]of Object.entries(i.armorSkills))t.armorSkills[e]=max(t.armorSkills[e]||0,s)}},slotDecos=(e,t)=>{for(let i of[0,3,2,1])for(const[s,a]of n[i]){if(!e[i])break;if(!o.get(s))continue;const n=Math.min(e[i],~~(o.get(s)/-a));n&&(o.set(s,o.get(s)+n*a),e[i]-=n,t[t.length]=[s,a,"Slot lvl"+(+i+1),n])}if(r.size)for(let e of r.keys())r.delete(e);for(let e of o.keys()){if(!(o.get(e)<0))continue;const t=s[e]/3;r.has(t)||r.set(t,{total:0,skills:new Set}),r.get(t).total-=o.get(e),r.get(t).skills.add(e)}};function getBestCombos(e,t,i){return 2===e?function(e,t){let i=[[],0],s=!1,n=0,a=e.length;for(;!s;){if(++n>=a){if(i[1])return i;s=!0,n=0}let o=+e[n];for(let s=n;s<a;s++){let n=e[s];if(o+n>t)break;if(!(o+n<=i[1]||r.get(n).total<1+(o===n))&&(i=[[o,n],o+n],i[1]===t))return i}}return i}(t,Math.min(10,i)):3===e?function(e,t){let i=[[],0],s=!1,n=0,a=e.length;for(;!s;){if(++n>=a){if(i[1])return i;s=!0,n=0}let o=+e[n];for(let s=n;s<a;s++){let n=+e[s];if(!(r.get(n).total<1+(o===n)))for(let l=s;l<a;l++){let s=+e[l];if(o+n+s>t)break;if(!(o+n+s<=i[1])&&(!(r.get(s).total<1+(s===o)+(s===n))&&(i=[[o,n,s],o+n+s],i[1]===t)))return i}}}return i}(t,i>15?15:i):findBestSum1(t,i)||[[0],1]}const findBestSum1=(e,t)=>{for(let i=e.length-1;i>=0;--i)if(e[i]<=t)return[[e[i]],e[i]];return[[],0]},combosFullRestriction=(e,t,i)=>{let s=Math.min(5,~~(i/t));for(;s>0;){if(r.has(s)&&r.get(s).total-r.get(s).skills.size>=t-1)for(let e of r.get(s).skills)if(-o.get(e)>=t)return[[e,t]];--s}return!1},combosPartalRestriction=(e,t)=>{let i=e.length;for(;i--;){const s=e[i],n=r.get(s);if(t<e[0]+2*s||n.total===n.skills.size)continue;let a=Math.min(5,t-2*s),l=-1;for(let t of n.skills){let i=o.get(t);if(++l,!(i>-2)){if(a===s&&n.total>=3){if(i<-2)return[[t,3]];for(let e in n.skills.values())if(e!==t)return[[t,2],[e,1]]}for(;a>=e[0];--a)if(r.has(a)&&a!==s)return[[t,2],[r.get(a).skills.values().next().value,1]]}}}return!1},getPoints=(e,t)=>{e.fodderSkills[++e.skillsRemovedCount]?(t[e.name].push({"-Skill":e.fodderSkills[e.skillsRemovedCount]}),e.quriousPoints+=10):(t[e.name].push({"-Def":5}),e.quriousPoints+=5),e.unBloatedPoints=~~(e.quriousPoints/3)},minimumCostForPossibleAugs=(e,t,i=!1)=>{let s=0;for(let n=0;e>0&&n<t.length;++n){const a=Math.min(r.get(t[n]).total-(!1===i?0:1),e);s+=a*t[n],e-=a}return s};function updateRecords(e,t,i,n){let l=s[e]/3;if(i.innateSkills.add(e),i.innateSkills.size>5||i.unBloatedPoints<l)return a&&console.log(i,t[i.name],e),i.innateSkills.delete(e),!0;i.quriousPoints-=3*l,i.unBloatedPoints-=l,t[i.name].push({"+Skill":e}),o.set(e,o.get(e)+1),0==--r.get(l).total?(r.delete(l),n.splice(n.indexOf(l),1)):0===o.get(e)&&r.get(l).skills.delete(e)}const getQuriousSkills=(e,t,i,n)=>{let a=0;for(let e of r.values())a+=e.total;let[...l]=r.keys(),c=5*n-a;for(let i of e)t[i.name]=i.augs.slice(),4===i.augs.length&&--c;e:for(const u of i){let i,d=e[u];d.innateSkills=new Set;for(let e in d.skills)d.innateSkills.add(e);if(d.skillsRemovedCount=-1,d.quriousPoints=d.startingQuriousPoints,d.unBloatedPoints=~~(d.quriousPoints/3),a<=0||t[d.name].length>=6)continue;let f=6-t[d.name].length,g=5-d.innateSkills.size,h=Math.min(f,a,n),S=f-a;for(;--S>=0||minimumCostForPossibleAugs(h,l)>d.unBloatedPoints&&--h>0;){if(--c<0)return!0;getPoints(d,t)}if(h){if(g<h)for(let e of d.requestedSkills){if(o.get(e)>=0)continue;const i=s[e]/3;for(;g<h&&o.get(e)<0&&i+minimumCostForPossibleAugs(h-1,l,i)<=d.unBloatedPoints;)updateRecords(e,t,d,l)||(--h,--a)}if(g<h)for(;h>g;){let e=1===g?combosFullRestriction(0,d.unBloatedPoints):combosPartalRestriction(l,d.unBloatedPoints);if(e){for(let i of e)for(;i[1]--&&!updateRecords(i[0],t,d,l);)--a;continue e}if(--c<0)return!0;--h,getPoints(d,t)}if(d.unBloatedPoints>=l[0]){if(i=getBestCombos(h,l,d.unBloatedPoints),!i[0])continue;for(const e of i[0])updateRecords(r.get(e).skills.values().next().value,t,d,l)||--a}}}e:for(const i of e){if(!a||n<4||!l.length)break;if(!(i.quriousPoints<3*+l[0]))for(let e=i.augs.length-1;e>=0&&i.unBloatedPoints>0;e--){if(6===i.augs.length&&i.quriousPoints<3||i.quriousPoints<8&&!i.augs[e]["-Skill"]||!i.augs[e]["-Def"])continue e;let s,n,o=t[i.name],c=o.length<6?0:o[e]["-Def"]?1:o[e]["-Skill"]?2:void 0;if(void 0===c)continue;let u=l.length-1;t:for(;u>=0;u--)if(!((i.quriousPoints-5*c)/3<l[u]))for(let e of r.get(l[u]).skills)if(i.innateSkills.size<5||i.innateSkills.has(e)){s=l[u],n=e;break t}if(!s)continue e;c&&(i.quriousPoints-=5*c,i.unBloatedPoints=~~(i.quriousPoints/3),o.splice(e,1)),updateRecords(n,t,i,l)||--a}}return l.length};function hasTooManyPoints(e,t){for(const s in e)if(t.has(s)&&t.get(s)+e[s]>i[s])return!0}function resetArmors(e,t,s){for(let i of t.keys())e.set(i,t.get(i));for(let t of s.requestedSkills)if(e.set(t,(e.get(t)||0)+s.skills[t]),e.get(t)>i[t])return!0}function testSets(e,t,i,s,n){let a={};a[e.charm[0][0]]=e.charm[0][1],a[e.charm[1][0]]=e.charm[1][1],e.decos.forEach((([e,t,,i])=>{a[e]=(a[e]||0)+t*i}));for(const t of e.armorSkills)a[t[0]]=(a[t[0]]||0)+t[1];for(let i of t)e.augments[i.name].forEach((e=>{e["+Skill"]&&(a[e["+Skill"]]=(a[e["+Skill"]]||0)+1)}));if(Object.entries(i).every((e=>a[e[0]]+e[1]>=0)))return!0;s.push({skillsNeeded:i,innateArmorSkills:e.armorSkills,charmSkills:e.charm,initalDecos:n,decosRecord:e.decos,skillsNeededAfterDecos:o,skillAugmentsRecorded:e.augments,skillsByCostListAfterAugment:r})}function findExtraDecorationSkills(e,t,i){for(let n=4;n>=0;n--)if(i[n])for(let[a,o,r,l]of t){if(n!==s[a]/3||i[n]<o)continue;const t=Math.min(l,~~(i[n]/o));e[r[9]-1]+=t,i[n]-=t*o}return e}function findExtraQuriousSkills(e,t){const i=[0,0,0,0,0];for(const s of e){if(s.quriousPoints<(6===t[s.name].length?8:3)||s.innateSkills?.size>4)continue;let e=0,n=0;const a=5-s.innateSkills.size;for(let i of t[s.name])i["-Def"]?++e:i["-Skill"]&&++n;let o=6-t[s.name].length,r=--o>=0?0:--e>=0?5:--n>=0?10:"continue";if("continue"===r)continue;let l=1;for(;s.quriousPoints>=r+3*l&&l<=a;){let t=Math.min(5,~~((s.quriousPoints-r)/l/3));for(;t--;)++i[t];if(r+=--o>=0?0:--e>=0?5:--n>=0?10:"continue","continue"===r)break;++l}}return i}function findExtraArmorSkills(e,t,i={}){for(const t of e){if(t.quriousPoints<5||!t.fodderCount)continue;let e=Math.min(~~(t.quriousPoints/5),t.fodderCount);for(let s in t.skills)t.innateSkills.has(s)||(i[s]=(i[s]||0)+Math.min(t[s],e))}return i}self.onmessage=e=>{const i={sets:[],count:{sets:0,combos:0},stats:{quriousSkills:[0,0,0,0,0],armorSkills:{},remainingSlots:[0,0,0,0]}};let{theseCharms:r,skills:l,armors:c}=e.data;for(let e of l)o.set(e[0],e[1]);l=Object.fromEntries(l),n.forEach(((e,i)=>{let a=[];for(let t in e)l[t]&&(a[a.length]=[t,e[t]]);n[i]=a.sort(((e,i)=>s[i[0]]*i[1]-s[e[0]]*e[1]||t[i[0]]-t[e[0]]))}));const u=[];let d=[0,1,2,3,4];const{setLimiter:f,charmNeeded:g}=e.data.skillInfo;let h=[[],[],[],[],[]];for(const t of c.helm){let s=new Map;for(let e of t.requestedSkills)s.set(e,t.skills[e]);h[0]=t;for(const n of c.chest){let S=new Map;if(!resetArmors(S,s,n)){h[1]=n;for(const s of c.arm){let k=new Map;if(!resetArmors(k,S,s)){h[2]=s;for(const S of c.waist){let p=new Map;if(!resetArmors(p,k,S)){h[3]=S;e:for(const k of c.leg){let c=new Map;if(resetArmors(c,p,k))continue;if(h[4]=k,e.data.skillInfo.setBonus)for(let t in e.data.skillInfo.setBonus)if(!(c.get(t)+e.data.skillInfo.setBonus[t]>=0))continue e;const[...m]=c,R=[0,0,0,0];[t.decos,n.decos,s.decos,S.decos,k.decos,e.data.charmSlots].forEach((e=>e.forEach(((e,t)=>R[t]+=e)))),d.sort(((e,t)=>h[e].skillLimitation-h[t].skillLimitation));const B=[];let P=["standard","qurious","deco"];if(g){P=["charmNeeded"];for(const t in g)if(c.get(t)>=g[t])P=["standard","qurious","deco"];else if((c.get(t)||0)+e.data.skillInfo.charmSkillPoints[t]<g[t])continue e}for(const e of P)if(r[e])for(let t of r[e])t:for(const e of t)for(let t=0;t<e.length;++t){let s=e[t];if(hasTooManyPoints(s,c))continue;const n={decos:[],augments:{},armorSkills:m,charm:Object.entries(s)};for(const e of o.keys())o.set(e,l[e]+(c.get(e)||0)+(s[e]||0));let r=R.slice();if(slotDecos(r,n.decos),getQuriousSkills(h,n.augments,d,f))break t;if(!a||testSets(n,h,l,u,R)){let s=findExtraArmorSkills(h,n.augments),a=findExtraQuriousSkills(h,n.augments),o=findExtraDecorationSkills(r,n.decos,a.slice());B[B.length]={usedSkills:n,armors:[[h[0].name,h[0]],[h[1].name,h[1]],[h[2].name,h[2]],[h[3].name,h[3]],[h[4]?.name,h[4]]],charmList:e.slice(t).filter((e=>!hasTooManyPoints(e,c))),quriousSkills:a,remainingSlots:o,armorSkills:s,decoArr:R},1===B.length?(B[0].totalCount=B[0].charmList.length,i.count.combos+=B[0].charmList.length):(B[0].totalCount=B[B.length-1].charmList.length,i.count.combos+=B[B.length-1].charmList.length);continue t}}if(!B.length)continue e;if(getMostSkills(B,i.stats),++i.count.sets>20&&B[0].totalCount<i.sets[i.sets.length-1].totalCount)continue e;20===i.sets.length?i.sets.pop():i.sets.length||(i.sets[0]=B);let A=i.sets.length-1;for(;A>=0&&B[0].totalCount>i.sets[A].totalCount;)--A;i.sets.splice(A,0,B)}}}}}}}}a&&u.length&&console.log(structuredClone(u)),postMessage({final:i})}})();