const getDecos=([...t],s,e,o)=>{const r={remainingSkills:{}};r.remainingSkills.arr=[],r.decosUsed=[];return(()=>{for(let o=0;o<s.length&&t[3]>0;o++){if(0===e[s[o][0]].lvl4||e[s[o][0]].lvl4>2||s[o][1]>=-1)continue;const n=~~Math.min(t[3],-1*s[o][1]/e[s[o][0]].lvl4);t[3]-=n,s[o][1]+=e[s[o][0]].lvl4*n,r.decosUsed.push([s[o][0],e[s[o][0]].lvl4,"Slot lvl4",n])}})(),r.check=(()=>{for(const[n,l]of s){if(!l)continue;let s=0;switch(e[n].lvl){case 1:s=Math.min(-1*l,t[0]);break;case 2:s=Math.min(-1*l,t[1]+t[2]+t[3]);break;case 3:s=Math.min(-1*l,t[2]+t[3]);break;default:s=Math.min(-1*l,t[3])}if(s+l<0){const t=e[n].qurious;let i=s+l;if(r.remainingSkills[t]||(r.remainingSkills[t]=[]),t>=3&&(o+=i)<0||t<3&&(o+=i/1.25)<0)return!1;for(;i++;)r.remainingSkills.arr.push(t),r.remainingSkills[t].push(n);if(!s)continue}let i=e[n].lvl-2;for(;i++<4;){if(!t[i])continue;const e=Math.min(s,t[i]);if(t[i]-=e,r.decosUsed.push([n,1,`Slot lvl${i+1}`,e]),l+e===0)break}}return o})(),[r,t]},combos3=(t,s)=>{for(let e=0,o=1,r=2,n=t.length;r<n;e++,o++,r++)if(!(t[e]+t[o]+t[r]<s))return t[e]+t[o]+t[r]===s||0===e||t[--e]+t[o]+t[r]<=s||t[e]+t[--o]+t[r]<=s?[t[e],t[o],t[r],t[e]+t[o]+t[r]]:[t[e],t[o],t[r-1],t[e]+t[o]+t[r-1]];return[t[t.length-3],t[t.length-2],t[t.length-1],t[t.length-3]+t[t.length-2]+t[t.length-1]]},combos2=(t,s)=>{for(let e=0,o=1;o<t.length;e++,o++)if(!(t[e]+t[o]<s))return t[e]+t[o]===s||0===e||t[--e]+t[o]<=s?[t[e],t[o],t[e]+t[o]]:[t[e],t[o-1],t[e]+t[o-1]];return[t[t.length-2],t[t.length-1],t[t.length-2]+t[t.length-1]]},combos1=(t,s=5)=>t[1]>=s?t[2]>=s?t[3]>=s?[t[3],t[3]]:[t[2],t[2]]:[t[1],t[1]]:[t[0],t[0]],getQuriousSkills=(t,s,e)=>{let o=0;const r=[],n=[],l=t.arr.slice(0).reverse();delete t.arr;const i=t=>{let s=0;t.fodderCount>t.skillsRemovedCount&&(++s,++t.skillsRemovedCount);const e=5*(1+s);t.augs.push({[s?"-Skill":"-Def"]:e}),r.push([e,s?"-Skill":"-Def",t.name,1]),t.points+=e,t.totalQuriousPoints=~~(t.points/3+.1)},u=(t,s,e)=>{let r=t-s;for(o=s;r--;)i(e);return s},a=(s,e)=>{for(const o of s){const s=t[o];e.augs.push({"+Skill":s[s.length-1]}),r.push([s.pop(),1,e.name,1]),l.splice(l.lastIndexOf(o),1)}};for(let r=0;r<5;r++){let i={};if((t=>{i.augs=[...t.fodder.augs[0]],i.points=t.quriousPoints,i.totalQuriousPoints=~~(t.quriousPoints/3+.1),i.skills=t.fodder.skills,i.type=t.fodder.type,i.fodderCount=t.fodder.fodderCount,i.skillsRemovedCount=Math.min(3,t.fodder.fodderCount),i.name=t.name,o=6-i.augs.length,l.length<o&&(o=u(o,l.length,i))})(s[r]),3===o&&l[0]+l[1]+l[2]>i.totalQuriousPoints){if(--e<0)return{quriousAugs:0,finalSkillCheck:0,returnArmors:0,arr:!1};o=u(3,2,i)}if(2===o&&l[0]+l[1]>i.totalQuriousPoints){if(--e<0)return{quriousAugs:0,finalSkillCheck:0,returnArmors:0,arr:!1};o=u(2,1,i)}if(1===o&&l[0]>i.totalQuriousPoints){if(--e<0)return{quriousAugs:0,finalSkillCheck:0,returnArmors:0,arr:!1};o=u(1,0,i);continue}const c=[];for(let[s,e]of Object.entries(t)){let t=Math.min(e.length,o);for(;t--;)c.push(+s)}let f=[];if(3===o)f=combos3(c,i.totalQuriousPoints);else if(2===o)f=combos2(c,i.totalQuriousPoints);else{if(!(1===o&&l[0]<=i.totalQuriousPoints)){if(--e<0)return{quriousAugs:0,finalSkillCheck:0,returnArmors:0,arr:!1};n.push(i);continue}f=combos1(c,i.totalQuriousPoints)}if((i.points-=Number(3*f.pop()))<0&&(console.log(`${i.name} has ${i.points} points}`,i),l.length))return{quriousAugs:0,finalSkillCheck:0,returnArmors:0,arr:!1};a(f,i),n.push(i)}if(l.length)for(const t of n){let s=t.augs.length-1;for(;--s&&l.length&&t.points-5>=3*l[0];)if(t.augs[s]["-Def"]||t.augs[s]["-Skill"]&&10+3*l[0]<=t.points){t.augs.splice(s,1);const e=combos1(l,~~(t.points/3+.1));t.points-=3*e[1],a([e[0]],t)}}if(l.length)return{quriousAugs:0,finalSkillCheck:0,returnArmors:0,arr:!1};let c=[0,0,0,0,0],f={};for(let t of n){if(t.points<5||!t.fodderCount)continue;const s=Math.min(t.fodderCount,~~(t.points/5));for(let e of t.skills){const t=Object.entries(e);f[t[0][0]]?f[t[0][0]]+=s:f[t[0][0]]=s}if(t.points<8)continue;let e=6-t.augs.length,o=t.skillsRemovedCount,r=t.points+0;for(;++e<=3&&!((r-=--o>=0?5:10)<3*e);){let t=~~(r/e/3+.1);for(;t--;)++c[t]}}return{quriousAugs:r,returnArmors:n,theseExtraPoints:c,newSkills:f,arr:0===l.length}},combineDecos=(t,s)=>{const[...e]=s;return t.forEach((t=>{e[0]+=t[0],e[1]+=t[1],e[2]+=t[2],e[3]+=t[3]})),e},max=(t,s)=>t>=s?t:s,getMostSkills=(t,s)=>{for(const e of t){for(let t=0;t<4;t++)s.remainingSlots[t]=max(s.remainingSlots[t],e.remainingSlots[t]);for(let t=0;t<5;t++)s.quriousSkills[t]=max(s.quriousSkills[t],e.quriousSkills[t]);for(const[t,o]of Object.entries(e.armorSkills))s.armorSkills[t]=max(s.armorSkills[t],o)}};function sumArmorSkills(t,s){const e={};return t.forEach((t=>{Object.entries(t.skills).forEach((([t,o])=>{s[t]&&(e[t]=(e[t]||0)+o)}))})),e}addEventListener("message",(t=>{let s={count:[0,0],stats:{quriousSkills:[0,0,0,0,0],armorSkills:{},remainingSlots:[0,0,0,0]},sets:[]},e=1;t.data.requiredSkills=Object.entries(t.data.skills);for(const o of Object.values(t.data.permutations)){t.data.theseArmors=[t.data.armors.helm[o[0]],t.data.armors.chest[o[1]],t.data.armors.arm[o[2]],t.data.armors.waist[o[3]],t.data.armors.leg[o[4]]];const r=testThisBatch(t.data);r&&(getMostSkills(r,s.stats),s.count[1]+=r.length,++s.count[0],e&&s.sets.push(r)),e&&25===s.sets.length&&(--e,postMessage([s.sets,!1,s.count]),s.count=[0,0])}postMessage([s.sets,s.stats,s.count])}));const testThisBatch=t=>{const{thisWeapon:s,theseCharms:e,requiredSkills:o,skillInfo:r,theseArmors:n,skills:l}=t,i=sumArmorSkills(n,l),u={};for(const[t,s]of o){let e=i[t]?s+i[t]:s+0;if(e<0)u[t]=e;else if(e>r[t].max)return!1}const a=combineDecos([s,n[0].decos,n[1].decos,n[2].decos,n[3].decos,n[4].decos],t.charmDecos);for(let t=0;t<5;t++)n[t].totalQuriousPoints/(6-n[t].fodder.augs[0].length)>=3?n[t].sortBy=n[t].totalQuriousPoints/(6-n[t].fodder.augs[0].length):(n[t].totalQuriousPoints+2)/(6-n[t].fodder.augs[0].length-1)>=3&&(n[t].sortBy=(n[t].totalQuriousPoints+2)/(6-n[t].fodder.augs[0].length-1));n.sort(((t,s)=>t.sortBy-s.sortBy));let c=30;n.forEach((t=>c-=t.fodder.augs[0].length));let f=[];if(e.forEach((t=>{if(Object.entries(t).some((([t,s])=>!u[t]||u[t]+s>r[t].max)))return;const s=[];for(let e=0,o=Object.keys(u);e<o.length;e++){let r=o[e],n=t[r]?u[r]+t[r]:u[r]+0;n<0&&s.push([r,n])}const[e,o]=getDecos(a.slice(0),s,r,c);if(!e.check)return!1;const{quriousAugs:l,returnArmors:h,theseExtraPoints:m,newSkills:g,arr:d}=getQuriousSkills(e.remainingSkills,n,e.check+1);if(!d)return!1;h.some((t=>null==t.name))&&console.log(h),f.push({usedSkills:[].concat(e.decosUsed,l,Object.entries(i),Object.entries(t)),armors:[[h[0].name,h[0]],[h[1].name,h[1]],[h[2].name,h[2]],[h[3].name,h[3]],[h[4]?.name,h[4]]],remainingSlots:o,quriousSkills:m,armorSkills:g})})),f=f.filter((s=>{let e={};if(s.usedSkills.forEach((t=>{let s=t[3]?t[1]*t[3]:t[1];e[t[0]]?e[t[0]]+=s:e[t[0]]=s})),t.requiredSkills.every((t=>e[t[0]]+=t[1]>=0)))return!0;console.log(s,e)})),f[0]){const t=["helm","chest","arm","waist","leg"];return[...f]=f.map((s=>(s.armors.sort(((s,e)=>t.indexOf(s[1]?.type)-t.indexOf(e[1]?.type))),s))),f}return!1};
