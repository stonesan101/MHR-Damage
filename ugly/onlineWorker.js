const getDecos=([...a],c,d,g,l)=>{const e={remainingSkills:{},decosUsed:[]};(()=>{for(let h=0;h<c.length&&0<a[3];h++){const f=d[c[h][0]].lvl4;if(0!==f&&c[h][1]<=-f&&(1!==d[c[h][0]].lvl||0<=(l-=f))){const p=~~Math.min(a[3],-c[h][1]/f);a[3]-=p;c[h][1]+=f*p;e.decosUsed.push([c[h][0],f,"Slot lvl4",p])}}})();e.check=((h=-1)=>{for(let [w,x]of c){++h;if(0<=x)continue;let m;switch(d[w].lvl){case 1:m=Math.min(-x,a[0]);break;case 2:m=Math.min(-x,a[1]+a[2]+a[3]);break;case 3:m=Math.min(-x,a[2]+a[3]);break;case 4:m=
Math.min(-x,a[3]);break;default:m=0}if(0>m+x){var f=d[w].qurious,p=m+x;e.remainingSkills[f]||(e.remainingSkills[f]={total:0});if(3<=f&&0>(g+=p)||3>f&&0>(g+=p/1.25))return!1;e.remainingSkills[f][w]=0;e.remainingSkills[f].total-=p;e.remainingSkills[f][w]-=p;if(!m)continue}for(f=d[w].lvl-2;4>f++&&(!a[f]||(p=Math.min(m,a[f],-c[h][1]),a[f]-=p,c[h][1]+=p,e.decosUsed.push([w,1,`Slot lvl${f+1}`,p]),0!==c[h][1])););}return g})();return[e,a]};
function generateAugmentCombinations(a,c,d,g){let l=[];a:for(let e=0;e<d.length;e++){const h=d[e];for(let f=e+1;f<d.length;f++){const p=d[f];for(let w=f+1;w<d.length;w++){const x=d[w];let m=3;const q=[];if(h+p+x>g)continue;let n={[h]:1};n[p]=(n[p]||0)+1;n[x]=(n[x]||0)+1;b:for(let u=0,y=Object.entries(n);u<y.length;++u){c:for(let [b,k]of Object.entries(a[y[u][0]]))if("total"!==b)if(c.has(b)){for(m+=k;k++&&m--;)q.push(b);if(0===k)break b}else if(1<k){if(0>=(m+=k))break b;if(0>=(y[u][1]+=k-1))break c}if(!(0<
m)&&(l=[q,h+p+x],h+p+x===g))break a}}}}return l}
const findBestSum3=(a,c)=>{for(let d=0,g=1,l=2,e=a.length;l<e;d++,g++,l++)if(!(a[d]+a[g]+a[l]<c))return a[d]+a[g]+a[l]===c||0===d||a[--d]+a[g]+a[l]<=c||a[d]+a[--g]+a[l]<=c?[a[d],a[g],a[l],a[d]+a[g]+a[l]]:[a[d],a[g],a[l-1],a[d]+a[g]+a[l-1]];return[a[a.length-3],a[a.length-2],a[a.length-1],a[a.length-3]+a[a.length-2]+a[a.length-1]]},findBestSum2=(a,c)=>{for(let d=0,g=1;g<a.length;d++,g++)if(!(a[d]+a[g]<c))return a[d]+a[g]===c||0===d||a[--d]+a[g]<=c?[a[d],a[g],a[d]+a[g]]:[a[d],a[g-1],a[d]+a[g-1]];return[a[a.length-
2],a[a.length-1],a[a.length-2]+a[a.length-1]]},findBestSum1=(a,c)=>{a=a.filter(d=>d<=c).pop();return[a,a]},getQuriousSkills=(a,c,d,g)=>{let {check:l,decosUsed:e,remainingSkills:h}=a;l+=5;var f=0;a=[];let p=0;for(var w in h)p+=h[w].total;w=b=>{let k=0;0<b.fodderSkills.length&&(++k,++b.skillsRemovedCount);const r=5*(1+k);b.augs.push({[k?"-Skill":"-Def"]:[k?b.fodderSkills.pop():r]});e.push([k?b.fodderSkills.pop():r,k?"-Skill":"-Def",b.name,1]);b.quriousPoints+=r;b.unBloatedPoints=~~(b.quriousPoints/
3)};const x=(b,k)=>{for(const r of b){b=h[r];let v=Object.keys(b)[1];if(5===k.innateSkills.size)for(let B=1,D=Object.keys(b);B<D.length;B++){if(h[D[B]]){v=D[B];break}if(B===D.length-1)return}k.augs.push({"+Skill":v});e.push([v,1,k.name,1]);k.innateSkills.add(v);0===--b.total?delete h[r]:0===--b[v]&&delete h[r][v];--p}};for(var m=0;m<c.length;m++){let b={};b={...c[m]};b.augs=[...c[m].augs];b.fodderSkills=[...c[m].fodderSkills];b.skillsRemovedCount=Math.min(3,c[m].fodderCount);b.innateSkills=new Set(Object.keys(c[m].skills));
if(0>=p){a.push(b);continue}f=6-b.augs.length;if(p<f)for(;f>p;)w(b),--f;if(1>f){a.push(b);continue}var q=f,n=1;let k=0,r=0,v=Object.keys(h);for(;q--;)r+=+v[k],q&&++n>h[v[k]].total&&(n=1,++k);if(b.unBloatedPoints<r){if(0>--l)return{quriousAugs:0,finalSkillCheck:0,returnArmors:0,arr:!1};--f;w(b);if(b.unBloatedPoints<(r-=v[k])){if(0>--l)return{quriousAugs:0,finalSkillCheck:0,returnArmors:0,arr:!1};--f;w(b);0===n-1&&--k;if(b.unBloatedPoints<r-v[k]){if(0>--l)return{quriousAugs:0,finalSkillCheck:0,returnArmors:0,
arr:!1};--f;a.push(b);continue}}}q=[];for(var u in h)for(n=Math.min(h[u].total,f);n--;)q.push(+u);n=[];if(3===f)n=findBestSum3(q,b.unBloatedPoints);else if(2===f)n=findBestSum2(q,b.unBloatedPoints);else if(1===f&&b.unBloatedPoints>=q[0])n=findBestSum1(q,b.unBloatedPoints);else{if(0>--l)return{quriousAugs:0,finalSkillCheck:0,returnArmors:0,arr:!1};a.push(b);continue}if(5-thisPiece.innateSkills.size<n.length)satisfySkillsRestriction();else if(0>(b.quriousPoints-=Number(3*n.pop()))){console.log(`${b.name} has ${b.quriousPoints} points}`,
b);debugger}x(n,b);a.push(b)}c=(b,k)=>{b.augs.splice(k,1);k=findBestSum1(Object.keys(h).filter(r=>r<=b.quriousPoints),~~(b.quriousPoints/3));b.quriousPoints-=3*k[1];x([k[0]],b)};if(0<p)for(const b of a)if(!(4<b.innateSkills.size&&Object.entries(h).filter(k=>Object.keys(k[1]).some(r=>b.innateSkills.has(r))))){if(!Object.keys(h).length)break;for(u=b.augs.length-1;--u;)b.augs.some(k=>k["-Def"])&&b.quriousPoints-5>=3*Object.keys(h)[0]?(b.quriousPoints-=5,c(b,u)):b.augs.some(k=>k["-Skill"])&&3*Object.keys(h)[0]<=
b.quriousPoints-10&&(b.quriousPoints-=10,c(b,u))}if(Object.keys(h).length)return{quriousAugs:0,finalSkillCheck:0,returnArmors:0,arr:!1};c=[0,0,0,0,0];let y={};for(let b of a){if(5>b.quriousPoints||!b.fodderCount)continue;const k=Math.min(b.fodderCount,~~(b.quriousPoints/5));Object.keys(b.skills).forEach(r=>{y[r]=y[r]?y[r]+(g[r]?Math.min(d[r].max-g[r],k):k):g[r]?Math.min(d[r].max-g[r],k):k});if(!(4<b.innateSkills.size||8>b.quriousPoints))for(u=b.augs.length,f=b.skillsRemovedCount,w=b.quriousPoints+
0;0<=--u&&!((w-=0<=--f?5:10)<3*u);)for(m=~~(w/u/3);m--;)++c[m]}return{quriousAugs:e,returnArmors:a,theseExtraPoints:c,newSkills:y,arr:!p}},combineDecos=(a,c)=>{const [...d]=c;a.forEach(g=>{d[0]+=g[0];d[1]+=g[1];d[2]+=g[2];d[3]+=g[3]});return d},max=(a,c)=>a>=c?a:c,getMostSkills=(a,c)=>{for(const d of a){for(a=0;4>a;a++)c.remainingSlots[a]=max(c.remainingSlots[a],d.remainingSlots[a]);for(a=0;5>a;a++)c.quriousSkills[a]=max(c.quriousSkills[a],d.quriousSkills[a]);for(const [g,l]of Object.entries(d.armorSkills))c.armorSkills[g]=
max(c.armorSkills[g],l)}};function sumArmorSkills(a,c){const d={};a.forEach(g=>{Object.entries(g.skills).forEach(([l,e])=>{c[l]&&(d[l]=(d[l]||0)+e)})});return d}
self.addEventListener("message",a=>{var c=[0,0];var d={quriousSkills:[0,0,0,0,0],armorSkills:{},remainingSlots:[0,0,0,0]};var g=[];let l=1;a.data.requiredSkills=Object.entries(a.data.skills);for(const e of Object.values(a.data.permutations)){a.data.theseArmors=[a.data.armors.helm[e[0]],a.data.armors.chest[e[1]],a.data.armors.arm[e[2]],a.data.armors.waist[e[3]],a.data.armors.leg[e[4]]];const h=testThisBatch(a.data);h&&(getMostSkills(h,d),c[1]+=h.length,++c[0],l&&g.push(h));l&&25===g.length&&(--l,postMessage([g,
!1,c]),c=[0,0])}postMessage([g,d,c])});
const testThisBatch=a=>{const {thisWeapon:c,theseCharms:d,requiredSkills:g,skillInfo:l,theseArmors:e,skills:h}=a,f=sumArmorSkills(e,h),p=combineDecos([c,e[0].decos,e[1].decos,e[2].decos,e[3].decos,e[4].decos],a.charmSlots);let w=30;e.forEach(m=>w-=m.augs.length);let x=[];d.forEach(m=>{if(!Object.entries(m).some(([t,A])=>f[t]&&f[t]+A>l[t].max)){var q=[],n=-p[0];for(let [t,A]of g){f[t]&&(A+=f[t]);m[t]&&(A+=m[t]);const {lvl:E,max:I}=l[t];if(A>I)return;1===E&&(n-=A);0>A&&q.push([t,A])}a:for(let t=0,A=
e.length;t<A;t++){var u=5-Object.keys(e[t].skills).length,y=6-e[t].augs.length;if(u>=y)continue;let E=~~(e[t].quriousPoints/3);u=y-u;let I=~~(E/y);y=([z,C],G,F=-1)=>{if(!(l[z].qurious<I||l[z].qurious*G>E)){if(-1===F)for(let H=0;H<q.length;H++)if(q[H][0]===z){F=H;break}if(C<=-G&&E>=l[z].qurious*G){C=Math.min(-C,G);e[t].quriousPoints-=l[z].qurious*C*3;e[t].unBloatedPoints=~~(e[t].quriousPoints/3);0<=(q[F][1]+=C)&&q.splice(F,1);for(e[t].skills[z]=(e[t].skills[z]||0)+C;C--;)e[t].augs.push({"+Skill":z});
return!0}}};for(let z of Object.entries(e[t].skills))if(f[z[0]]&&y(z,u))continue a;let J=q.length;for(;--J;)if(y(q[J],u+1,J))continue a}var [b,k]=getDecos(p.slice(0),q,l,w,n);if(!b.check)return!1;var {quriousAugs:r,returnArmors:v,theseExtraPoints:B,newSkills:D,arr:K}=getQuriousSkills(b,e,l,h);if(!K)return!1;if(v.some(t=>void 0==t.name)){debugger;console.log(v)}x.push({usedSkills:[].concat(r,Object.entries(f),Object.entries(m)),armors:[[v[0].name,v[0]],[v[1].name,v[1]],[v[2].name,v[2]],[v[3].name,
v[3]],[v[4]?.name,v[4]]],remainingSlots:k,quriousSkills:B,armorSkills:D,thisCharm:m,decoArr:p})}});x=x.filter(m=>{let q={};m.usedSkills.forEach(n=>{let u=n[3]?n[1]*n[3]:n[1];q[n[0]]=q[n[0]]?q[n[0]]+u:u});if(a.requiredSkills.every(n=>q[n[0]]+=0<=n[1]))return!0;console.log({set:m,ugh:q,skills:h});debugger});if(x[0])return x};
