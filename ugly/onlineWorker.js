const getDecos=([...a],d,c,g,k)=>{const f={remainingSkills:{},decosUsed:[]};(()=>{for(let e=0;e<d.length&&a[3];e++){const h=c[d[e][0]].lvl4;if(0!==h&&d[e][1]<=-1*h&&(1!==c[d[e][0]].lvl||0<=(k-=h))){const p=~~Math.min(a[3],-1*d[e][1]/h);a[3]-=p;d[e][1]+=h*p;f.decosUsed.push([d[e][0],h,"Slot lvl4",p])}}})();f.check=(()=>{for(const [p,u]of d){if(!u||20===c[p].querious)continue;let v;switch(c[p].lvl){case 1:v=Math.min(-1*u,a[0]);break;case 2:v=Math.min(-1*u,a[1]+a[2]+a[3]);break;case 3:v=Math.min(-1*
u,a[2]+a[3]);break;default:v=Math.min(-1*u,a[3])}if(0>v+u){var e=c[p].qurious,h=v+u;f.remainingSkills[e]||(f.remainingSkills[e]={total:0});if(3<=e&&0>(g+=h)||3>e&&0>(g+=h/1.25))return!1;for(f.remainingSkills[e][p]=0;h++;)++f.remainingSkills[e].total,++f.remainingSkills[e][p];if(!v)continue}for(e=c[p].lvl-2;4>e++&&(!a[e]||(h=Math.min(v,a[e]),a[e]-=h,f.decosUsed.push([p,1,`Slot lvl${e+1}`,h]),0!==u+h)););}return g})();return[f,a]};
function generateAugmentCombinations(a,d,c,g){let k=[];a:for(let f=0;f<c.length;f++){const e=c[f];for(let h=f+1;h<c.length;h++){const p=c[h];for(let u=h+1;u<c.length;u++){const v=c[u];let w=3-(5-d.size);if(e+p+v>g)break a;let n={a:1};n[p]?++n[p]:n[p]=1;n[v]?++n[v]:n[v]=1;b:for(let m=0,t=Object.entries(n);m<t.length;++m)c:for(const [z,b]of Object.entries(a[t[m][0]]))if("total"!==z)if(d.has(z)){if(0>=(w+=b))break b;if(0>=(t[m][1]+=b))break c}else if(1<b){if(0>=(w+=b))break b;if(0>=(t[m][1]+=b-1))break c}if(!(0<
w)&&(e+p+v<g&&(k=[e,p,v]),e+p+v>g))break a}}}return[k,k.reduce((f,e)=>f+e)]}
const findBestSum3=(a,d)=>{for(let c=0,g=1,k=2,f=a.length;k<f;c++,g++,k++)if(!(a[c]+a[g]+a[k]<d))return a[c]+a[g]+a[k]===d||0===c||a[--c]+a[g]+a[k]<=d||a[c]+a[--g]+a[k]<=d?[a[c],a[g],a[k],a[c]+a[g]+a[k]]:[a[c],a[g],a[k-1],a[c]+a[g]+a[k-1]];return[a[a.length-3],a[a.length-2],a[a.length-1],a[a.length-3]+a[a.length-2]+a[a.length-1]]},findBestSum2=(a,d)=>{for(let c=0,g=1;g<a.length;c++,g++)if(!(a[c]+a[g]<d))return a[c]+a[g]===d||0===c||a[--c]+a[g]<=d?[a[c],a[g],a[c]+a[g]]:[a[c],a[g-1],a[c]+a[g-1]];return[a[a.length-
2],a[a.length-1],a[a.length-2]+a[a.length-1]]},findBestSum1=(a,d)=>{a=a.filter(c=>c<=d).pop();return[a,a]},getQuriousSkills=(a,d,c,g)=>{let {check:k,decosUsed:f,remainingSkills:e}=a;k+=5;var h=0;a=[];let p=0;for(var u of Object.values(e))p+=u.total?u.total:0;u=b=>{let l=0;0<b.fodderSkills.length&&(++l,++b.skillsRemovedCount);const q=5*(1+l);b.augs.push({[l?"-Skill":"-Def"]:[l?b.fodderSkills.pop():q]});f.push([l?b.fodderSkills.pop():q,l?"-Skill":"-Def",b.name,1]);b.quriousPoints+=q;b.unBloatedPoints=
~~(b.quriousPoints/3)};const v=(b,l)=>{for(const q of b){b=e[q];let x=Object.keys(b)[1];if(5===l.innateSkills.size)for(let D=1,E=Object.keys(b);D<E.length;D++){if(e[E[D]]){x=E[D];break}if(D===E.length-1)return}l.augs.push({"+Skill":x});f.push([x,1,l.name,1]);l.innateSkills.add(x);0===--b.total?delete e[q]:0===--b[x]&&delete e[q][x];--p}};for(var w=0;w<d.length;w++){let b={};b={...d[w]};b.augs=[...d[w].augs];b.fodderSkills=[...d[w].fodderSkills];b.skillsRemovedCount=Math.min(3,d[w].fodderCount);b.innateSkills=
new Set(Object.keys(d[w].skills));if(0>=p){a.push(b);continue}h=6-b.augs.length;if(p<h)for(;h>p;)u(b),--h;if(1>h){a.push(b);continue}var n=h,m=1;let l=0,q=0,x=Object.keys(e);for(;n--;)q+=+x[l],n&&++m>e[x[l]].total&&(m=1,++l);if(b.unBloatedPoints<q){if(0>--k)return{quriousAugs:0,finalSkillCheck:0,returnArmors:0,arr:!1};--h;u(b);if(b.unBloatedPoints<(q-=x[l])){if(0>--k)return{quriousAugs:0,finalSkillCheck:0,returnArmors:0,arr:!1};--h;u(b);0===m-1&&--l;if(b.unBloatedPoints<q-x[l]){if(0>--k)return{quriousAugs:0,
finalSkillCheck:0,returnArmors:0,arr:!1};--h;a.push(b);continue}}}n=[];for(var t in e)for(m=Math.min(e[t].total,h);m--;)n.push(+t);m=[];if(3===h)m=findBestSum3(n,b.unBloatedPoints);else if(2===h)m=findBestSum2(n,b.unBloatedPoints);else if(1===h&&b.unBloatedPoints>=n[0])m=findBestSum1(n,b.unBloatedPoints);else{if(0>--k)return{quriousAugs:0,finalSkillCheck:0,returnArmors:0,arr:!1};a.push(b);continue}if(0>(b.quriousPoints-=Number(3*m.pop()))){console.log(`${b.name} has ${b.quriousPoints} points}`,b);
debugger}v(m,b);a.push(b)}d=(b,l)=>{b.augs.splice(l,1);l=findBestSum1(Object.keys(e).filter(q=>q<=b.quriousPoints),~~(b.quriousPoints/3));b.quriousPoints-=3*l[1];v([l[0]],b)};if(0<p)for(const b of a)if(!(4<b.innateSkills.length&&Object.entries(e).filter(l=>Object.keys(l[1]).some(q=>b.innateSkills.has(q))))){if(!Object.keys(e).length)break;for(t=b.augs.length-1;--t;)b.augs.some(l=>l["-Def"])&&b.quriousPoints-5>=3*Object.keys(e)[0]?(b.quriousPoints-=5,d(b,t)):b.augs.some(l=>l["-Skill"])&&3*Object.keys(e)[0]<=
b.quriousPoints-10&&(b.quriousPoints-=10,d(b,t))}if(Object.keys(e).length)return{quriousAugs:0,finalSkillCheck:0,returnArmors:0,arr:!1};d=[0,0,0,0,0];let z={};for(let b of a){if(5>b.quriousPoints||!b.fodderCount)continue;const l=Math.min(b.fodderCount,~~(b.quriousPoints/5));Object.keys(b.skills).forEach(q=>{z[q]=z[q]?z[q]+(g[q]?Math.min(c[q].max-g[q],l):l):g[q]?Math.min(c[q].max-g[q],l):l});if(!(4<b.innateSkills||8>b.quriousPoints))for(t=b.augs.length,h=b.skillsRemovedCount,u=b.quriousPoints+0;0<=
--t&&!((u-=0<=--h?5:10)<3*t);)for(w=~~(u/t/3);w--;)++d[w]}return{quriousAugs:f,returnArmors:a,theseExtraPoints:d,newSkills:z,arr:!p}},combineDecos=(a,d)=>{const [...c]=d;a.forEach(g=>{c[0]+=g[0];c[1]+=g[1];c[2]+=g[2];c[3]+=g[3]});return c},max=(a,d)=>a>=d?a:d,getMostSkills=(a,d)=>{for(const c of a){for(a=0;4>a;a++)d.remainingSlots[a]=max(d.remainingSlots[a],c.remainingSlots[a]);for(a=0;5>a;a++)d.quriousSkills[a]=max(d.quriousSkills[a],c.quriousSkills[a]);for(const [g,k]of Object.entries(c.armorSkills))d.armorSkills[g]=
max(d.armorSkills[g],k)}};function sumArmorSkills(a,d){const c={};a.forEach(g=>{Object.entries(g.skills).forEach(([k,f])=>{d[k]&&(c[k]=(c[k]||0)+f)})});return c}
self.addEventListener("message",a=>{var d=[0,0];var c={quriousSkills:[0,0,0,0,0],armorSkills:{},remainingSlots:[0,0,0,0]};var g=[];let k=1;a.data.requiredSkills=Object.entries(a.data.skills);for(const f of Object.values(a.data.permutations)){a.data.theseArmors=[a.data.armors.helm[f[0]],a.data.armors.chest[f[1]],a.data.armors.arm[f[2]],a.data.armors.waist[f[3]],a.data.armors.leg[f[4]]];const e=testThisBatch(a.data);e&&(getMostSkills(e,c),d[1]+=e.length,++d[0],k&&g.push(e));k&&25===g.length&&(--k,postMessage([g,
!1,d]),d=[0,0])}postMessage([g,c,d])});
const testThisBatch=a=>{const {thisWeapon:d,theseCharms:c,requiredSkills:g,skillInfo:k,theseArmors:f,skills:e}=a,h=sumArmorSkills(f,e),p=combineDecos([d,f[0].decos,f[1].decos,f[2].decos,f[3].decos,f[4].decos],a.charmSlots);let u=30;f.forEach(w=>u-=w.augs.length);let v=[];c.forEach(w=>{if(!Object.entries(w).some(([r,A])=>h[r]&&h[r]+A>k[r].max)){var n=[],m=-p[0];for(let [r,A]of g){h[r]&&(A+=h[r]);w[r]&&(A+=w[r]);const {lvl:F,max:C}=k[r];if(A>C)return;1===F&&(m-=A);0>A&&n.push([r,A])}a:for(let r=0,A=
f.length;r<A;r++){var t=5-Object.keys(f[r].skills).length,z=6-f[r].augs.length;if(t>=z)continue;let F=~~(f[r].quriousPoints/3),C=z-t+1;t=~~(F/z);z=([y,B],G=0)=>{if(!(k[y].lvl4||9>k[y].qurious||k[y].qurious*(h[y]?C-1:C)>F)){G||=n.indexOf(y);if(!f[r].skills[y]&&B<=-C&&F>=k[y].qurious*C)B=Math.min(-B,C);else if(f[r].skills[y])B=Math.min(-B,C-1);else return;f[r].quriousPoints-=k[y].qurious*B*3;f[r].unBloatedPoints=~~(f[r].quriousPoints/3);0===(n[G][1]+=B)&&n.splice(G,1);for(f[r].skills[y]=(f[r].skills[y]||
0)+B;B--;)f[r].augs.push({"+Skill":y});return!0}};for(let y of Object.entries(f[r].skills))if(h[y[0]]&&z(y))continue a;let H=5>t?0:n.length;for(;5>t?++H<n.length:0<--H;)if(z(n[H]))continue a}var [b,l]=getDecos(p.slice(0),n,k,u,m);if(!b.check)return!1;var {quriousAugs:q,returnArmors:x,theseExtraPoints:D,newSkills:E,arr:I}=getQuriousSkills(b,f,k,e);if(!I)return!1;if(x.some(r=>void 0==r.name)){debugger;console.log(x)}v.push({usedSkills:[].concat(q,Object.entries(h),Object.entries(w)),armors:[[x[0].name,
x[0]],[x[1].name,x[1]],[x[2].name,x[2]],[x[3].name,x[3]],[x[4]?.name,x[4]]],remainingSlots:l,quriousSkills:D,armorSkills:E,thisCharm:w,decoArr:p})}});v=v.filter(w=>{let n={};w.usedSkills.forEach(m=>{let t=m[3]?m[1]*m[3]:m[1];n[m[0]]=n[m[0]]?n[m[0]]+t:t});if(a.requiredSkills.every(m=>n[m[0]]+=0<=m[1]))return!0;console.log({set:w,ugh:n,skills:e});debugger});if(v[0])return v};
